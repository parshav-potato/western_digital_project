[
  {
    "url": "https://fastapi.tiangolo.com/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_FastAPI framework, high performance, easy to learn, fast to code, ready for\nproduction_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Documentation** : <https://fastapi.tiangolo.com>\n**Source Code** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI is a modern, fast (high-performance), web framework for building APIs\nwith Python based on standard Python type hints.\nThe key features are:\n  * **Fast** : Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.\n  * **Fast to code** : Increase the speed to develop features by about 200% to 300%. *\n  * **Fewer bugs** : Reduce about 40% of human (developer) induced errors. *\n  * **Intuitive** : Great editor support. Completion everywhere. Less time debugging.\n  * **Easy** : Designed to be easy to use and learn. Less time reading docs.\n  * **Short** : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n  * **Robust** : Get production-ready code. With automatic interactive documentation.\n  * **Standards-based** : Based on (and fully compatible with) the open standards for APIs: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (previously known as Swagger) and [JSON Schema](https://json-schema.org/).\n* estimation based on tests on an internal development team, building production applications.\n## Sponsors¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Other sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## Opinions¶\n\"_[...] I'm using**FastAPI** a ton these days. [...] I'm actually planning to\nuse it for all of my team's **ML services at Microsoft**. Some of them are\ngetting integrated into the core **Windows** product and some **Office**\nproducts._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_We adopted the**FastAPI** library to spawn a **REST** server that can be\nqueried to obtain **predictions**. [for Ludwig]_\"\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** is pleased to announce the open-source release of our **crisis\nmanagement** orchestration framework: **Dispatch**! [built with **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_I’m over the moon excited about**FastAPI**. It’s so fun!_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcast host**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honestly, what you've built looks super solid and polished. In many ways,\nit's what I wanted**Hug** to be - it's really inspiring to see someone build\nthat._\"\nTimothy Crosley - **[Hug](https://github.com/hugapi/hug) creator**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_If you're looking to learn one**modern framework** for building REST APIs,\ncheck out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_\"\n\"_We've switched over to**FastAPI** for our **APIs** [...] I think you'll like\nit [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai)\nfounders - [spaCy](https://spacy.io) creators**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_If anyone is looking to build a production Python API, I would highly\nrecommend**FastAPI**. It is **beautifully designed** , **simple to use** and\n**highly scalable** , it has become a **key component** in our API first\ndevelopment strategy and is driving many automations and services such as our\nVirtual TAC Engineer._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , the FastAPI of CLIs¶\n[](https://typer.tiangolo.com)\nIf you are building a CLI app to be used in the terminal instead of a web API,\ncheck out [**Typer**](https://typer.tiangolo.com/).\n**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI\nof CLIs**. ⌨️ 🚀\n## Requirements¶\nFastAPI stands on the shoulders of giants:\n  * [Starlette](https://www.starlette.dev/) for the web parts.\n  * [Pydantic](https://docs.pydantic.dev/) for the data parts.\n## Installation¶\nCreate and activate a [virtual\nenvironment](https://fastapi.tiangolo.com/virtual-environments/) and then\ninstall FastAPI:\n    $ pip install \"fastapi[standard]\"\n    ---> 100%\n**Note** : Make sure you put `\"fastapi[standard]\"` in quotes to ensure it\nworks in all terminals.\n## Example¶\n### Create it¶\nCreate a file `main.py` with:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nOr use `async def`...\nIf your code uses `async` / `await`, use `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Note** :\nIf you don't know, check the _\"In a hurry?\"_ section about [`async` and\n`await` in the docs](https://fastapi.tiangolo.com/async/#in-a-hurry).\n### Run it¶\nRun the server with:\n    $ fastapi dev main.py\n     ╭────────── FastAPI CLI - Development mode ───────────╮\n     │                                                     │\n     │  Serving at: http://127.0.0.1:8000                  │\n     │                                                     │\n     │  API docs: http://127.0.0.1:8000/docs               │\n     │                                                     │\n     │  Running in development mode, for production use:   │\n     │                                                     │\n     │  fastapi run                                        │\n     │                                                     │\n     ╰─────────────────────────────────────────────────────╯\n    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [2248755] using WatchFiles\n    INFO:     Started server process [2248757]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nAbout the command `fastapi dev main.py`...\nThe command `fastapi dev` reads your `main.py` file, detects the **FastAPI**\napp in it, and starts a server using [Uvicorn](https://www.uvicorn.dev).\nBy default, `fastapi dev` will start with auto-reload enabled for local\ndevelopment.\nYou can read more about it in the [FastAPI CLI\ndocs](https://fastapi.tiangolo.com/fastapi-cli/).\n### Check it¶\nOpen your browser at <http://127.0.0.1:8000/items/5?q=somequery>.\nYou will see the JSON response as:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nYou already created an API that:\n  * Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.\n  * Both _paths_ take `GET` _operations_ (also known as HTTP _methods_).\n  * The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.\n  * The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.\n### Interactive API docs¶\nNow go to <http://127.0.0.1:8000/docs>.\nYou will see the automatic interactive API documentation (provided by [Swagger\nUI](https://github.com/swagger-api/swagger-ui)):\n### Alternative API docs¶\nAnd now, go to <http://127.0.0.1:8000/redoc>.\nYou will see the alternative automatic documentation (provided by\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Example upgrade¶\nNow modify the file `main.py` to receive a body from a `PUT` request.\nDeclare the body using standard Python types, thanks to Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nThe `fastapi dev` server should reload automatically.\n### Interactive API docs upgrade¶\nNow go to <http://127.0.0.1:8000/docs>.\n  * The interactive API documentation will be automatically updated, including the new body:\n  * Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API:\n  * Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:\n### Alternative API docs upgrade¶\nAnd now, go to <http://127.0.0.1:8000/redoc>.\n  * The alternative documentation will also reflect the new query parameter and body:\n### Recap¶\nIn summary, you declare **once** the types of parameters, body, etc. as\nfunction parameters.\nYou do that with standard modern Python types.\nYou don't have to learn a new syntax, the methods or classes of a specific\nlibrary, etc.\nJust standard **Python**.\nFor example, for an `int`:\n    item_id: int\nor for a more complex `Item` model:\n    item: Item\n...and with that single declaration you get:\n  * Editor support, including:\n    * Completion.\n    * Type checks.\n  * Validation of data:\n    * Automatic and clear errors when the data is invalid.\n    * Validation even for deeply nested JSON objects.\n  * Conversion of input data: coming from the network to Python data and types. Reading from:\n    * JSON.\n    * Path parameters.\n    * Query parameters.\n    * Cookies.\n    * Headers.\n    * Forms.\n    * Files.\n  * Conversion of output data: converting from Python data and types to network data (as JSON):\n    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).\n    * `datetime` objects.\n    * `UUID` objects.\n    * Database models.\n    * ...and many more.\n  * Automatic interactive API documentation, including 2 alternative user interfaces:\n    * Swagger UI.\n    * ReDoc.\n* * *\nComing back to the previous code example, **FastAPI** will:\n  * Validate that there is an `item_id` in the path for `GET` and `PUT` requests.\n  * Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.\n    * If it is not, the client will see a useful, clear error.\n  * Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.\n    * As the `q` parameter is declared with `= None`, it is optional.\n    * Without the `None` it would be required (as is the body in the case with `PUT`).\n  * For `PUT` requests to `/items/{item_id}`, read the body as JSON:\n    * Check that it has a required attribute `name` that should be a `str`.\n    * Check that it has a required attribute `price` that has to be a `float`.\n    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.\n    * All this would also work for deeply nested JSON objects.\n  * Convert from and to JSON automatically.\n  * Document everything with OpenAPI, that can be used by:\n    * Interactive documentation systems.\n    * Automatic client code generation systems, for many languages.\n  * Provide 2 interactive documentation web interfaces directly.\n* * *\nWe just scratched the surface, but you already get the idea of how it all\nworks.\nTry changing the line with:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...from:\n            ... \"item_name\": item.name ...\n...to:\n            ... \"item_price\": item.price ...\n...and see how your editor will auto-complete the attributes and know their\ntypes:\nFor a more complete example including more features, see the [Tutorial - User\nGuide](https://fastapi.tiangolo.com/tutorial/).\n**Spoiler alert** : the tutorial - user guide includes:\n  * Declaration of **parameters** from other different places as: **headers** , **cookies** , **form fields** and **files**.\n  * How to set **validation constraints** as `maximum_length` or `regex`.\n  * A very powerful and easy to use **Dependency Injection** system.\n  * Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.\n  * More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).\n  * **GraphQL** integration with [Strawberry](https://strawberry.rocks) and other libraries.\n  * Many extra features (thanks to Starlette) as:\n    * **WebSockets**\n    * extremely easy tests based on HTTPX and `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ...and more.\n## Performance¶\nIndependent TechEmpower benchmarks show **FastAPI** applications running under\nUvicorn as [one of the fastest Python frameworks\navailable](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nonly below Starlette and Uvicorn themselves (used internally by FastAPI). (*)\nTo understand more about it, see the section\n[Benchmarks](https://fastapi.tiangolo.com/benchmarks/).\n## Dependencies¶\nFastAPI depends on Pydantic and Starlette.\n### `standard` Dependencies¶\nWhen you install FastAPI with `pip install \"fastapi[standard]\"` it comes with\nthe `standard` group of optional dependencies:\nUsed by Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- for email validation.\nUsed by Starlette:\n  * [`httpx`](https://www.python-httpx.org) \\- Required if you want to use the `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Required if you want to use the default template configuration.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Required if you want to support form \"parsing\", with `request.form()`.\nUsed by FastAPI:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- for the server that loads and serves your application. This includes `uvicorn[standard]`, which includes some dependencies (e.g. `uvloop`) needed for high performance serving.\n  * `fastapi-cli[standard]` \\- to provide the `fastapi` command.\n    * This includes `fastapi-cloud-cli`, which allows you to deploy your FastAPI application to [FastAPI Cloud](https://fastapicloud.com).\n### Without `standard` Dependencies¶\nIf you don't want to include the `standard` optional dependencies, you can\ninstall with `pip install fastapi` instead of `pip install\n\"fastapi[standard]\"`.\n### Without `fastapi-cloud-cli`¶\nIf you want to install FastAPI with the standard dependencies but without the\n`fastapi-cloud-cli`, you can install with `pip install \"fastapi[standard-no-\nfastapi-cloud-cli]\"`.\n### Additional Optional Dependencies¶\nThere are some additional dependencies you might want to install.\nAdditional optional Pydantic dependencies:\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \\- for settings management.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \\- for extra types to be used with Pydantic.\nAdditional optional FastAPI dependencies:\n  * [`orjson`](https://github.com/ijl/orjson) \\- Required if you want to use `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- Required if you want to use `UJSONResponse`.\n## License¶\nThis project is licensed under the terms of the MIT license.\nBack to top\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data",
    "length": 18420,
    "links": [
      "https://fastapi.tiangolo.com/newsletter/",
      "https://fastapi.tiangolo.com/de/",
      "https://fastapi.tiangolo.com/es/",
      "https://fastapi.tiangolo.com/fa/",
      "https://fastapi.tiangolo.com/fr/",
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/features/",
      "https://fastapi.tiangolo.com/learn/",
      "https://fastapi.tiangolo.com/reference/",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/resources/",
      "https://fastapi.tiangolo.com/about/",
      "https://fastapi.tiangolo.com/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/virtual-environments/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/fastapi-cli/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/features/"
    ],
    "depth": 0
  },
  {
    "url": "https://fastapi.tiangolo.com/newsletter/",
    "title": "FastAPI and friends newsletter¶",
    "content": "# FastAPI and friends newsletter¶\nBack to top\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data",
    "length": 405,
    "links": [
      "https://fastapi.tiangolo.com/de/",
      "https://fastapi.tiangolo.com/es/",
      "https://fastapi.tiangolo.com/fa/",
      "https://fastapi.tiangolo.com/fr/",
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/features/",
      "https://fastapi.tiangolo.com/learn/",
      "https://fastapi.tiangolo.com/reference/",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/resources/",
      "https://fastapi.tiangolo.com/about/",
      "https://fastapi.tiangolo.com/release-notes/",
      "https://fastapi.tiangolo.com/external-links/",
      "https://fastapi.tiangolo.com/management-tasks/"
    ],
    "depth": 1
  },
  {
    "url": "https://fastapi.tiangolo.com/de/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com/de)\n_FastAPI-Framework, hohe Performanz, leicht zu lernen, schnell zu entwickeln,\nproduktionsreif_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Dokumentation** : <https://fastapi.tiangolo.com/de>\n**Quellcode** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI ist ein modernes, schnelles (hoch performantes) Webframework zur\nErstellung von APIs mit Python auf Basis von Standard-Python-Typhinweisen.\nSeine Schlüssel-Merkmale sind:\n  * **Schnell** : Sehr hohe Performanz, auf Augenhöhe mit **NodeJS** und **Go** (dank Starlette und Pydantic). Eines der schnellsten verfügbaren Python-Frameworks.\n  * **Schnell zu entwickeln** : Erhöhen Sie die Geschwindigkeit bei der Entwicklung von Features um etwa 200 % bis 300 %. *\n  * **Weniger Bugs** : Verringern Sie die von Menschen (Entwicklern) verursachten Fehler um etwa 40 %. *\n  * **Intuitiv** : Hervorragende Editor-Unterstützung. Code-Vervollständigung überall. Weniger Zeit mit Debuggen verbringen.\n  * **Einfach** : So konzipiert, dass es einfach zu benutzen und zu erlernen ist. Weniger Zeit mit dem Lesen von Dokumentation verbringen.\n  * **Kurz** : Minimieren Sie die Verdoppelung von Code. Mehrere Features aus jeder Parameterdeklaration. Weniger Bugs.\n  * **Robust** : Erhalten Sie produktionsreifen Code. Mit automatischer, interaktiver Dokumentation.\n  * **Standards-basiert** : Basierend auf (und vollständig kompatibel mit) den offenen Standards für APIs: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (früher bekannt als Swagger) und [JSON Schema](https://json-schema.org/).\n* Schätzung basierend auf Tests in einem internen Entwicklungsteam, das Produktionsanwendungen erstellt.\n## Sponsoren¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Andere Sponsoren](https://fastapi.tiangolo.com/de/fastapi-people/#sponsors)\n## Meinungen¶\n„ _[...] Ich verwende**FastAPI** heutzutage sehr oft. [...] Ich habe\ntatsächlich vor, es für alle **ML-Services meines Teams bei Microsoft** zu\nverwenden. Einige davon werden in das Kernprodukt **Windows** und einige\n**Office** -Produkte integriert._“\nKabir Khan – **Microsoft**\n[(Ref.)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n„ _Wir haben die**FastAPI** -Bibliothek übernommen, um einen **REST** -Server\nzu erstellen, der für **Vorhersagen** abgefragt werden kann. [für Ludwig]_“\nPiero Molino, Yaroslav Dudin, und Sai Sumanth Miryala – **Uber**\n[(Ref.)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n„ _**Netflix** freut sich, die Open-Source-Veröffentlichung unseres\n**Krisenmanagement** -Orchestrierung-Frameworks bekannt zu geben:\n**Dispatch**! [erstellt mit **FastAPI**]_“\nKevin Glisson, Marc Vilanova, Forest Monsen – **Netflix**\n[(Ref.)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n„ _Ich bin hellauf begeistert von**FastAPI**. Es macht so viel Spaß!_“\nBrian Okken – **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) Podcast-Host**\n[(Ref.)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n„ _Ehrlich, was Du gebaut hast, sieht super solide und poliert aus. In\nvielerlei Hinsicht ist es so, wie ich**Hug** haben wollte – es ist wirklich\ninspirierend, jemanden so etwas bauen zu sehen._“\nTimothy Crosley – **[Hug](https://github.com/hugapi/hug)-Autor**\n[(Ref.)](https://news.ycombinator.com/item?id=19455465)\n* * *\n„ _Wenn Sie ein**modernes Framework** zum Erstellen von REST-APIs erlernen\nmöchten, schauen Sie sich **FastAPI** an. [...] Es ist schnell, einfach zu\nverwenden und leicht zu lernen [...]_“\n„ _Wir haben zu**FastAPI** für unsere **APIs** gewechselt [...] Ich denke, es\nwird Ihnen gefallen [...]_“\nInes Montani – Matthew Honnibal – **[Explosion\nAI](https://explosion.ai)-Gründer – [spaCy](https://spacy.io)-Autoren**\n[(Ref.)](https://x.com/_inesmontani/status/1144173225322143744) –\n[(Ref.)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n„ _Falls irgendjemand eine Produktions-Python-API erstellen möchte, kann\nich**FastAPI** wärmstens empfehlen. Es ist **wunderschön konzipiert** ,\n**einfach zu verwenden** und **hoch skalierbar** ; es ist zu einer\n**Schlüsselkomponente** unserer API-First-Entwicklungsstrategie geworden und\ntreibt viele Automatisierungen und Services an, wie etwa unseren Virtual TAC\nEngineer._“\nDeon Pillsbury – **Cisco**\n[(Ref.)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , das FastAPI der CLIs¶\n[](https://typer.tiangolo.com)\nWenn Sie eine CLI-Anwendung für das Terminal erstellen, anstelle einer Web-\nAPI, schauen Sie sich [**Typer**](https://typer.tiangolo.com/) an.\n**Typer** ist die kleine Schwester von FastAPI. Und es soll das **FastAPI der\nCLIs** sein. ⌨️ 🚀\n## Anforderungen¶\nFastAPI steht auf den Schultern von Giganten:\n  * [Starlette](https://www.starlette.dev/) für die Webanteile.\n  * [Pydantic](https://docs.pydantic.dev/) für die Datenanteile.\n## Installation¶\nErstellen und aktivieren Sie eine [virtuelle\nUmgebung](https://fastapi.tiangolo.com/de/virtual-environments/) und\ninstallieren Sie dann FastAPI:\n    $ pip install \"fastapi[standard]\"\n    ---> 100%\n**Hinweis** : Stellen Sie sicher, dass Sie `\"fastapi[standard]\"` in\nAnführungszeichen setzen, damit es in allen Terminals funktioniert.\n## Beispiel¶\n### Erstellung¶\nErstellen Sie eine Datei `main.py` mit:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nOder verwenden Sie `async def` ...\nWenn Ihr Code `async` / `await` verwendet, benutzen Sie `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Hinweis** :\nWenn Sie das nicht kennen, schauen Sie sich den Abschnitt _„In Eile?“_ über\n[`async` und `await` in der\nDokumentation](https://fastapi.tiangolo.com/de/async/#in-a-hurry) an.\n### Starten¶\nStarten Sie den Server mit:\n    $ fastapi dev main.py\n     ╭────────── FastAPI CLI - Development mode ───────────╮\n     │                                                     │\n     │  Serving at: http://127.0.0.1:8000                  │\n     │                                                     │\n     │  API docs: http://127.0.0.1:8000/docs               │\n     │                                                     │\n     │  Running in development mode, for production use:   │\n     │                                                     │\n     │  fastapi run                                        │\n     │                                                     │\n     ╰─────────────────────────────────────────────────────╯\n    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [2248755] using WatchFiles\n    INFO:     Started server process [2248757]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nWas der Befehl `fastapi dev main.py` macht ...\nDer Befehl `fastapi dev` liest Ihre `main.py`-Datei, erkennt die **FastAPI**\n-App darin und startet einen Server mit [Uvicorn](https://www.uvicorn.dev).\nStandardmäßig wird `fastapi dev` mit aktiviertem Auto-Reload für die lokale\nEntwicklung gestartet.\nSie können mehr darüber in der [FastAPI CLI\nDokumentation](https://fastapi.tiangolo.com/de/fastapi-cli/) lesen.\n### Es testen¶\nÖffnen Sie Ihren Browser unter <http://127.0.0.1:8000/items/5?q=somequery>.\nSie sehen die JSON-Response als:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nSie haben bereits eine API erstellt, welche:\n  * HTTP-Requests auf den _Pfaden_ `/` und `/items/{item_id}` entgegennimmt.\n  * Beide _Pfade_ nehmen `GET` _Operationen_ (auch bekannt als HTTP-_Methoden_) entgegen.\n  * Der _Pfad_ `/items/{item_id}` hat einen _Pfad-Parameter_ `item_id`, der ein `int` sein sollte.\n  * Der _Pfad_ `/items/{item_id}` hat einen optionalen `str`-_Query-Parameter_ `q`.\n### Interaktive API-Dokumentation¶\nGehen Sie nun auf <http://127.0.0.1:8000/docs>.\nSie sehen die automatische interaktive API-Dokumentation (bereitgestellt von\n[Swagger UI](https://github.com/swagger-api/swagger-ui)):\n### Alternative API-Dokumentation¶\nUnd jetzt gehen Sie auf <http://127.0.0.1:8000/redoc>.\nSie sehen die alternative automatische Dokumentation (bereitgestellt von\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Beispiel Aktualisierung¶\nÄndern Sie jetzt die Datei `main.py`, um den Body eines `PUT`-Requests zu\nempfangen.\nDeklarieren Sie den Body mit Standard-Python-Typen, dank Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nDer `fastapi dev`-Server sollte automatisch neu laden.\n### Interaktive API-Dokumentation aktualisieren¶\nGehen Sie jetzt auf <http://127.0.0.1:8000/docs>.\n  * Die interaktive API-Dokumentation wird automatisch aktualisiert, einschließlich des neuen Bodys:\n  * Klicken Sie auf den Button „Try it out“, damit können Sie die Parameter ausfüllen und direkt mit der API interagieren:\n  * Klicken Sie dann auf den Button „Execute“, die Benutzeroberfläche wird mit Ihrer API kommunizieren, sendet die Parameter, holt die Ergebnisse und zeigt sie auf dem Bildschirm an:\n### Alternative API-Dokumentation aktualisieren¶\nUnd jetzt gehen Sie auf <http://127.0.0.1:8000/redoc>.\n  * Die alternative Dokumentation wird ebenfalls den neuen Query-Parameter und Body widerspiegeln:\n### Zusammenfassung¶\nZusammengefasst deklarieren Sie **einmal** die Typen von Parametern, Body,\nusw. als Funktionsparameter.\nDas machen Sie mit modernen Standard-Python-Typen.\nSie müssen keine neue Syntax, Methoden oder Klassen einer bestimmten\nBibliothek usw. lernen.\nNur Standard-**Python**.\nZum Beispiel für ein `int`:\n    item_id: int\noder für ein komplexeres `Item`-Modell:\n    item: Item\n... und mit dieser einen Deklaration erhalten Sie:\n  * Editor-Unterstützung, einschließlich:\n    * Code-Vervollständigung.\n    * Typprüfungen.\n  * Validierung von Daten:\n    * Automatische und eindeutige Fehler, wenn die Daten ungültig sind.\n    * Validierung sogar für tief verschachtelte JSON-Objekte.\n  * Konvertierung von Eingabedaten: Aus dem Netzwerk kommend, zu Python-Daten und -Typen. Lesen von:\n    * JSON.\n    * Pfad-Parametern.\n    * Query-Parametern.\n    * Cookies.\n    * Headern.\n    * Formularen.\n    * Dateien.\n  * Konvertierung von Ausgabedaten: Konvertierung von Python-Daten und -Typen zu Netzwerkdaten (als JSON):\n    * Konvertieren von Python-Typen (`str`, `int`, `float`, `bool`, `list`, usw.).\n    * `datetime`-Objekte.\n    * `UUID`-Objekte.\n    * Datenbankmodelle.\n    * ... und viele mehr.\n  * Automatische interaktive API-Dokumentation, einschließlich zwei alternativer Benutzeroberflächen:\n    * Swagger UI.\n    * ReDoc.\n* * *\nUm auf das vorherige Codebeispiel zurückzukommen, **FastAPI** wird:\n  * Validieren, dass es eine `item_id` im Pfad für `GET`\\- und `PUT`-Requests gibt.\n  * Validieren, ob die `item_id` vom Typ `int` für `GET`\\- und `PUT`-Requests ist.\n    * Falls nicht, sieht der Client einen hilfreichen, klaren Fehler.\n  * Prüfen, ob es einen optionalen Query-Parameter namens `q` (wie in `http://127.0.0.1:8000/items/foo?q=somequery`) für `GET`-Requests gibt.\n    * Da der `q`-Parameter mit `= None` deklariert ist, ist er optional.\n    * Ohne das `None` wäre er erforderlich (wie der Body im Fall von `PUT`).\n  * Bei `PUT`-Requests an `/items/{item_id}` den Body als JSON lesen:\n    * Prüfen, ob er ein erforderliches Attribut `name` hat, das ein `str` sein muss.\n    * Prüfen, ob er ein erforderliches Attribut `price` hat, das ein `float` sein muss.\n    * Prüfen, ob er ein optionales Attribut `is_offer` hat, das ein `bool` sein muss, falls vorhanden.\n    * All dies würde auch für tief verschachtelte JSON-Objekte funktionieren.\n  * Automatisch von und nach JSON konvertieren.\n  * Alles mit OpenAPI dokumentieren, welches verwendet werden kann von:\n    * Interaktiven Dokumentationssystemen.\n    * Automatisch Client-Code generierenden Systemen für viele Sprachen.\n  * Zwei interaktive Dokumentations-Weboberflächen direkt bereitstellen.\n* * *\nWir haben nur an der Oberfläche gekratzt, aber Sie bekommen schon eine\nVorstellung davon, wie das Ganze funktioniert.\nVersuchen Sie, diese Zeile zu ändern:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n... von:\n            ... \"item_name\": item.name ...\n... zu:\n            ... \"item_price\": item.price ...\n... und sehen Sie, wie Ihr Editor die Attribute automatisch vervollständigt\nund ihre Typen kennt:\nFür ein vollständigeres Beispiel, mit weiteren Funktionen, siehe das [Tutorial\n– Benutzerhandbuch](https://fastapi.tiangolo.com/de/tutorial/).\n**Spoiler-Alarm** : Das Tutorial – Benutzerhandbuch enthält:\n  * Deklaration von **Parametern** von anderen verschiedenen Stellen wie: **Header** , **Cookies** , **Formularfelder** und **Dateien**.\n  * Wie man **Validierungs-Constraints** wie `maximum_length` oder `regex` setzt.\n  * Ein sehr leistungsfähiges und einfach zu bedienendes System für **Dependency Injection**.\n  * Sicherheit und Authentifizierung, einschließlich Unterstützung für **OAuth2** mit **JWT-Tokens** und **HTTP Basic** Authentifizierung.\n  * Fortgeschrittenere (aber ebenso einfache) Techniken zur Deklaration **tief verschachtelter JSON-Modelle** (dank Pydantic).\n  * **GraphQL** -Integration mit [Strawberry](https://strawberry.rocks) und anderen Bibliotheken.\n  * Viele zusätzliche Features (dank Starlette) wie:\n    * **WebSockets**\n    * extrem einfache Tests auf Basis von HTTPX und `pytest`\n    * **CORS**\n    * **Cookie-Sessions**\n    * ... und mehr.\n## Performanz¶\nUnabhängige TechEmpower-Benchmarks zeigen **FastAPI** -Anwendungen, die unter\nUvicorn laufen, als [eines der schnellsten verfügbaren Python-\nFrameworks](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nnur hinter Starlette und Uvicorn selbst (intern von FastAPI verwendet). (*)\nUm mehr darüber zu erfahren, siehe den Abschnitt\n[Benchmarks](https://fastapi.tiangolo.com/de/benchmarks/).\n## Abhängigkeiten¶\nFastAPI hängt von Pydantic und Starlette ab.\n### `standard`-Abhängigkeiten¶\nWenn Sie FastAPI mit `pip install \"fastapi[standard]\"` installieren, kommt es\nmit der `standard`-Gruppe optionaler Abhängigkeiten:\nVerwendet von Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) – für E-Mail-Validierung.\nVerwendet von Starlette:\n  * [`httpx`](https://www.python-httpx.org) – erforderlich, wenn Sie den `TestClient` verwenden möchten.\n  * [`jinja2`](https://jinja.palletsprojects.com) – erforderlich, wenn Sie die Default-Template-Konfiguration verwenden möchten.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) – erforderlich, wenn Sie Formulare mittels `request.form()` „parsen“ möchten.\nVerwendet von FastAPI:\n  * [`uvicorn`](https://www.uvicorn.dev) – für den Server, der Ihre Anwendung lädt und bereitstellt. Dies umfasst `uvicorn[standard]`, das einige Abhängigkeiten (z. B. `uvloop`) beinhaltet, die für eine Bereitstellung mit hoher Performanz benötigt werden.\n  * `fastapi-cli[standard]` – um den `fastapi`-Befehl bereitzustellen.\n    * Dies beinhaltet `fastapi-cloud-cli`, das es Ihnen ermöglicht, Ihre FastAPI-Anwendung auf [FastAPI Cloud](https://fastapicloud.com) bereitzustellen.\n### Ohne `standard`-Abhängigkeiten¶\nWenn Sie die `standard` optionalen Abhängigkeiten nicht einschließen möchten,\nkönnen Sie mit `pip install fastapi` statt `pip install \"fastapi[standard]\"`\ninstallieren.\n### Ohne `fastapi-cloud-cli`¶\nWenn Sie FastAPI mit den Standardabhängigkeiten, aber ohne das `fastapi-cloud-\ncli` installieren möchten, können Sie mit `pip install \"fastapi[standard-no-\nfastapi-cloud-cli]\"` installieren.\n### Zusätzliche optionale Abhängigkeiten¶\nEs gibt einige zusätzliche Abhängigkeiten, die Sie installieren möchten.\nZusätzliche optionale Pydantic-Abhängigkeiten:\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) – für die Verwaltung von Einstellungen.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) – für zusätzliche Typen zur Verwendung mit Pydantic.\nZusätzliche optionale FastAPI-Abhängigkeiten:\n  * [`orjson`](https://github.com/ijl/orjson) – erforderlich, wenn Sie `ORJSONResponse` verwenden möchten.\n  * [`ujson`](https://github.com/esnme/ultrajson) – erforderlich, wenn Sie `UJSONResponse` verwenden möchten.\n## Lizenz¶\nDieses Projekt ist unter den Bedingungen der MIT-Lizenz lizenziert.\nZurück zum Seitenanfang\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface – Kommandozeilen-Schnittstelle\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: Dependency Injection – Einbringen von Abhängigkeiten: Auch bekannt als Komponenten, Ressourcen, Provider, Services, Injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten",
    "length": 20630,
    "links": [
      "https://fastapi.tiangolo.com/es/",
      "https://fastapi.tiangolo.com/fa/",
      "https://fastapi.tiangolo.com/fr/",
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/de/features/",
      "https://fastapi.tiangolo.com/de/learn/",
      "https://fastapi.tiangolo.com/de/reference/",
      "https://fastapi.tiangolo.com/de/fastapi-people/",
      "https://fastapi.tiangolo.com/de/resources/",
      "https://fastapi.tiangolo.com/de/about/",
      "https://fastapi.tiangolo.com/de/release-notes/",
      "https://fastapi.tiangolo.com/de",
      "https://fastapi.tiangolo.com/de",
      "https://fastapi.tiangolo.com/de/fastapi-people/",
      "https://fastapi.tiangolo.com/de/virtual-environments/",
      "https://fastapi.tiangolo.com/de/async/",
      "https://fastapi.tiangolo.com/de/fastapi-cli/",
      "https://fastapi.tiangolo.com/de/tutorial/",
      "https://fastapi.tiangolo.com/de/benchmarks/",
      "https://fastapi.tiangolo.com/de/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/es/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_FastAPI framework, alto rendimiento, fácil de aprender, rápido de programar,\nlisto para producción_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Documentación** : <https://fastapi.tiangolo.com>\n**Código Fuente** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI es un framework web moderno, rápido (de alto rendimiento), para\nconstruir APIs con Python basado en las anotaciones de tipos estándar de\nPython.\nLas características clave son:\n  * **Rápido** : Muy alto rendimiento, a la par con **NodeJS** y **Go** (gracias a Starlette y Pydantic). Uno de los frameworks Python más rápidos disponibles.\n  * **Rápido de programar** : Aumenta la velocidad para desarrollar funcionalidades en aproximadamente un 200% a 300%. *\n  * **Menos bugs** : Reduce en aproximadamente un 40% los errores inducidos por humanos (desarrolladores). *\n  * **Intuitivo** : Gran soporte para editores. Autocompletado en todas partes. Menos tiempo depurando.\n  * **Fácil** : Diseñado para ser fácil de usar y aprender. Menos tiempo leyendo documentación.\n  * **Corto** : Minimiza la duplicación de código. Múltiples funcionalidades desde cada declaración de parámetro. Menos bugs.\n  * **Robusto** : Obtén código listo para producción. Con documentación interactiva automática.\n  * **Basado en estándares** : Basado (y completamente compatible) con los estándares abiertos para APIs: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (anteriormente conocido como Swagger) y [JSON Schema](https://json-schema.org/).\n* estimación basada en pruebas con un equipo de desarrollo interno, construyendo aplicaciones de producción.\n## Sponsors¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Otros sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## Opiniones¶\n\"_[...] Estoy usando**FastAPI** un montón estos días. [...] De hecho, estoy\nplaneando usarlo para todos los servicios de **ML de mi equipo en Microsoft**.\nAlgunos de ellos se están integrando en el núcleo del producto **Windows** y\nalgunos productos de **Office**._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_Adoptamos el paquete**FastAPI** para crear un servidor **REST** que pueda\nser consultado para obtener **predicciones**. [para Ludwig]_\"\nPiero Molino, Yaroslav Dudin, y Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** se complace en anunciar el lanzamiento de código abierto de\nnuestro framework de orquestación de **gestión de crisis** : **Dispatch**!\n[construido con **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_Estoy súper emocionado con**FastAPI**. ¡Es tan divertido!_\"\nBrian Okken - **[host del podcast Python\nBytes](https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-\nwrongs?time_in_sec=855)**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honestamente, lo que has construido parece súper sólido y pulido. En muchos\naspectos, es lo que quería que**Hug** fuera; es realmente inspirador ver a\nalguien construir eso._\"\nTimothy Crosley - **[creador de Hug](https://github.com/hugapi/hug)**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_Si estás buscando aprender un**framework moderno** para construir APIs REST,\néchale un vistazo a **FastAPI** [...] Es rápido, fácil de usar y fácil de\naprender [...]_\"\n\"_Nos hemos cambiado a**FastAPI** para nuestras **APIs** [...] Creo que te\ngustará [...]_\"\nInes Montani - Matthew Honnibal - **[fundadores de Explosion\nAI](https://explosion.ai) \\- [creadores de spaCy](https://spacy.io)**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_Si alguien está buscando construir una API de Python para producción,\naltamente recomendaría**FastAPI**. Está **hermosamente diseñado** , es\n**simple de usar** y **altamente escalable** , se ha convertido en un\n**componente clave** en nuestra estrategia de desarrollo API primero y está\nimpulsando muchas automatizaciones y servicios como nuestro Ingeniero Virtual\nTAC._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , el FastAPI de las CLIs¶\n[](https://typer.tiangolo.com)\nSi estás construyendo una aplicación de CLI para ser usada en el terminal en\nlugar de una API web, revisa [**Typer**](https://typer.tiangolo.com/).\n**Typer** es el hermano pequeño de FastAPI. Y está destinado a ser el\n**FastAPI de las CLIs**. ⌨️ 🚀\n## Requisitos¶\nFastAPI se apoya en hombros de gigantes:\n  * [Starlette](https://www.starlette.dev/) para las partes web.\n  * [Pydantic](https://docs.pydantic.dev/) para las partes de datos.\n## Instalación¶\nCrea y activa un [entorno virtual](https://fastapi.tiangolo.com/virtual-\nenvironments/) y luego instala FastAPI:\n    $ pip install \"fastapi[standard]\"\n    ---> 100%\n**Nota** : Asegúrate de poner `\"fastapi[standard]\"` entre comillas para\nasegurar que funcione en todas las terminales.\n## Ejemplo¶\n### Créalo¶\n  * Crea un archivo `main.py` con:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nO usa `async def`...\nSi tu código usa `async` / `await`, usa `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Nota** :\nSi no lo sabes, revisa la sección _\"¿Con prisa?\"_ sobre [`async` y `await` en\nla documentación](https://fastapi.tiangolo.com/async/#in-a-hurry).\n### Córrelo¶\nCorre el servidor con:\n    $ fastapi dev main.py\n     ╭────────── FastAPI CLI - Development mode ───────────╮\n     │                                                     │\n     │  Serving at: http://127.0.0.1:8000                  │\n     │                                                     │\n     │  API docs: http://127.0.0.1:8000/docs               │\n     │                                                     │\n     │  Running in development mode, for production use:   │\n     │                                                     │\n     │  fastapi run                                        │\n     │                                                     │\n     ╰─────────────────────────────────────────────────────╯\n    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [2248755] using WatchFiles\n    INFO:     Started server process [2248757]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nAcerca del comando `fastapi dev main.py`...\nEl comando `fastapi dev` lee tu archivo `main.py`, detecta la app **FastAPI**\nen él y arranca un servidor usando [Uvicorn](https://www.uvicorn.dev).\nPor defecto, `fastapi dev` comenzará con auto-recarga habilitada para el\ndesarrollo local.\nPuedes leer más sobre esto en la [documentación del CLI de\nFastAPI](https://fastapi.tiangolo.com/fastapi-cli/).\n### Revísalo¶\nAbre tu navegador en <http://127.0.0.1:8000/items/5?q=somequery>.\nVerás el response JSON como:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nYa creaste una API que:\n  * Recibe requests HTTP en los _paths_ `/` y `/items/{item_id}`.\n  * Ambos _paths_ toman _operaciones_ `GET` (también conocidas como métodos HTTP).\n  * El _path_ `/items/{item_id}` tiene un _parámetro de path_ `item_id` que debe ser un `int`.\n  * El _path_ `/items/{item_id}` tiene un _parámetro de query_ `q` opcional que es un `str`.\n### Documentación interactiva de la API¶\nAhora ve a <http://127.0.0.1:8000/docs>.\nVerás la documentación interactiva automática de la API (proporcionada por\n[Swagger UI](https://github.com/swagger-api/swagger-ui)):\n### Documentación de API Alternativa¶\nY ahora, ve a <http://127.0.0.1:8000/redoc>.\nVerás la documentación alternativa automática (proporcionada por\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Actualización del Ejemplo¶\nAhora modifica el archivo `main.py` para recibir un body desde un request\n`PUT`.\nDeclara el body usando tipos estándar de Python, gracias a Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nEl servidor `fastapi dev` debería recargarse automáticamente.\n### Actualización de la Documentación Interactiva de la API¶\nAhora ve a <http://127.0.0.1:8000/docs>.\n  * La documentación interactiva de la API se actualizará automáticamente, incluyendo el nuevo body:\n  * Haz clic en el botón \"Try it out\", te permite llenar los parámetros e interactuar directamente con la API:\n  * Luego haz clic en el botón \"Execute\", la interfaz de usuario se comunicará con tu API, enviará los parámetros, obtendrá los resultados y los mostrará en la pantalla:\n### Actualización de la Documentación Alternativa de la API¶\nY ahora, ve a <http://127.0.0.1:8000/redoc>.\n  * La documentación alternativa también reflejará el nuevo parámetro de query y body:\n### Resumen¶\nEn resumen, declaras **una vez** los tipos de parámetros, body, etc. como\nparámetros de función.\nLo haces con tipos estándar modernos de Python.\nNo tienes que aprender una nueva sintaxis, los métodos o clases de un paquete\nespecífico, etc.\nSolo **Python** estándar.\nPor ejemplo, para un `int`:\n    item_id: int\no para un modelo `Item` más complejo:\n    item: Item\n...y con esa única declaración obtienes:\n  * Soporte para editores, incluyendo:\n    * Autocompletado.\n    * Chequeo de tipos.\n  * Validación de datos:\n    * Errores automáticos y claros cuando los datos son inválidos.\n    * Validación incluso para objetos JSON profundamente anidados.\n  * Conversión de datos de entrada: de la red a los datos y tipos de Python. Leyendo desde:\n    * JSON.\n    * Parámetros de path.\n    * Parámetros de query.\n    * Cookies.\n    * Headers.\n    * Forms.\n    * Archivos.\n  * Conversión de datos de salida: convirtiendo de datos y tipos de Python a datos de red (como JSON):\n    * Convertir tipos de Python (`str`, `int`, `float`, `bool`, `list`, etc).\n    * Objetos `datetime`.\n    * Objetos `UUID`.\n    * Modelos de base de datos.\n    * ...y muchos más.\n  * Documentación interactiva automática de la API, incluyendo 2 interfaces de usuario alternativas:\n    * Swagger UI.\n    * ReDoc.\n* * *\nVolviendo al ejemplo de código anterior, **FastAPI** :\n  * Validará que haya un `item_id` en el path para requests `GET` y `PUT`.\n  * Validará que el `item_id` sea del tipo `int` para requests `GET` y `PUT`.\n    * Si no lo es, el cliente verá un error útil y claro.\n  * Comprobará si hay un parámetro de query opcional llamado `q` (como en `http://127.0.0.1:8000/items/foo?q=somequery`) para requests `GET`.\n    * Como el parámetro `q` está declarado con `= None`, es opcional.\n    * Sin el `None` sería requerido (como lo es el body en el caso con `PUT`).\n  * Para requests `PUT` a `/items/{item_id}`, leerá el body como JSON:\n    * Comprobará que tiene un atributo requerido `name` que debe ser un `str`.\n    * Comprobará que tiene un atributo requerido `price` que debe ser un `float`.\n    * Comprobará que tiene un atributo opcional `is_offer`, que debe ser un `bool`, si está presente.\n    * Todo esto también funcionaría para objetos JSON profundamente anidados.\n  * Convertirá de y a JSON automáticamente.\n  * Documentará todo con OpenAPI, que puede ser usado por:\n    * Sistemas de documentación interactiva.\n    * Sistemas de generación automática de código cliente, para muchos lenguajes.\n  * Proporcionará 2 interfaces web de documentación interactiva directamente.\n* * *\nSolo tocamos los conceptos básicos, pero ya te haces una idea de cómo funciona\ntodo.\nIntenta cambiar la línea con:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...desde:\n            ... \"item_name\": item.name ...\n...a:\n            ... \"item_price\": item.price ...\n...y observa cómo tu editor autocompleta los atributos y conoce sus tipos:\nPara un ejemplo más completo incluyendo más funcionalidades, ve al [Tutorial -\nGuía del Usuario](https://fastapi.tiangolo.com/tutorial/).\n**Alerta de spoilers** : el tutorial - guía del usuario incluye:\n  * Declaración de **parámetros** desde otros lugares diferentes como: **headers** , **cookies** , **campos de formulario** y **archivos**.\n  * Cómo establecer **restricciones de validación** como `maximum_length` o `regex`.\n  * Un sistema de **Inyección de Dependencias** muy poderoso y fácil de usar.\n  * Seguridad y autenticación, incluyendo soporte para **OAuth2** con **tokens JWT** y autenticación **HTTP Basic**.\n  * Técnicas más avanzadas (pero igualmente fáciles) para declarar **modelos JSON profundamente anidados** (gracias a Pydantic).\n  * Integración con **GraphQL** usando [Strawberry](https://strawberry.rocks) y otros paquetes.\n  * Muchas funcionalidades extra (gracias a Starlette) como:\n    * **WebSockets**\n    * pruebas extremadamente fáciles basadas en HTTPX y `pytest`\n    * **CORS**\n    * **Sesiones de Cookies**\n    * ...y más.\n## Rendimiento¶\nBenchmarks independientes de TechEmpower muestran aplicaciones **FastAPI**\nejecutándose bajo Uvicorn como [uno de los frameworks Python más rápidos\ndisponibles](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nsolo por debajo de Starlette y Uvicorn (usados internamente por FastAPI). (*)\nPara entender más sobre esto, ve la sección\n[Benchmarks](https://fastapi.tiangolo.com/benchmarks/).\n## Dependencias¶\nFastAPI depende de Pydantic y Starlette.\n### Dependencias `standard`¶\nCuando instalas FastAPI con `pip install \"fastapi[standard]\"` viene con el\ngrupo `standard` de dependencias opcionales:\nUsadas por Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- para validación de correos electrónicos.\nUsadas por Starlette:\n  * [`httpx`](https://www.python-httpx.org) \\- Requerido si deseas usar el `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Requerido si deseas usar la configuración de plantilla predeterminada.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Requerido si deseas soportar \"parsing\" de forms, con `request.form()`.\nUsadas por FastAPI / Starlette:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- para el servidor que carga y sirve tu aplicación. Esto incluye `uvicorn[standard]`, que incluye algunas dependencias (por ejemplo, `uvloop`) necesarias para servir con alto rendimiento.\n  * `fastapi-cli` \\- para proporcionar el comando `fastapi`.\n### Sin Dependencias `standard`¶\nSi no deseas incluir las dependencias opcionales `standard`, puedes instalar\ncon `pip install fastapi` en lugar de `pip install \"fastapi[standard]\"`.\n### Dependencias Opcionales Adicionales¶\nExisten algunas dependencias adicionales que podrías querer instalar.\nDependencias opcionales adicionales de Pydantic:\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \\- para la gestión de configuraciones.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \\- para tipos extra para ser usados con Pydantic.\nDependencias opcionales adicionales de FastAPI:\n  * [`orjson`](https://github.com/ijl/orjson) \\- Requerido si deseas usar `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- Requerido si deseas usar `UJSONResponse`.\n## Licencia¶\nEste proyecto tiene licencia bajo los términos de la licencia MIT.\nVolver al principio\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Interfaz de Línea de Comandos\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: Dependency Injection – Einbringen von Abhängigkeiten: Auch bekannt als Komponenten, Ressourcen, Provider, Services, Injectables\n  *[\"parsing\"]: convertir el string que viene de un request HTTP en datos de Python\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables",
    "length": 19856,
    "links": [
      "https://fastapi.tiangolo.com/fa/",
      "https://fastapi.tiangolo.com/fr/",
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/es/features/",
      "https://fastapi.tiangolo.com/es/learn/",
      "https://fastapi.tiangolo.com/es/reference/",
      "https://fastapi.tiangolo.com/es/fastapi-people/",
      "https://fastapi.tiangolo.com/es/resources/",
      "https://fastapi.tiangolo.com/es/about/",
      "https://fastapi.tiangolo.com/es/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/virtual-environments/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/fastapi-cli/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/es/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/fa/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_فریم‌ورک FastAPI، کارایی بالا، یادگیری آسان، کدنویسی سریع، آماده برای استفاده\nدر محیط پروداکشن_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**مستندات** : <https://fastapi.tiangolo.com>\n**کد منبع** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI یک وب فریم‌ورک مدرن و سریع (با کارایی بالا) برای ایجاد APIهای متنوع\n(وب، وب‌سوکت و غبره) با زبان پایتون نسخه +۳.۶ است. این فریم‌ورک با رعایت کامل\nراهنمای نوع داده (Type Hint) ایجاد شده است.\nویژگی‌های کلیدی این فریم‌ورک عبارتند از:\n  * **سرعت** : کارایی بسیار بالا و قابل مقایسه با **NodeJS** و **Go** (با تشکر از Starlette و Pydantic). یکی از سریع‌ترین فریم‌ورک‌های پایتونی موجود.\n  * **کدنویسی سریع** : افزایش ۲۰۰ تا ۳۰۰ درصدی سرعت توسعه قابلیت‌های جدید. *\n  * **باگ کمتر** : کاهش ۴۰ درصدی خطاهای انسانی (برنامه‌نویسی). *\n  * **هوشمندانه** : پشتیبانی فوق‌العاده در محیط‌های توسعه یکپارچه (IDE). تکمیل در همه بخش‌های کد. کاهش زمان رفع باگ.\n  * **آسان** : طراحی شده برای یادگیری و استفاده آسان. کاهش زمان مورد نیاز برای مراجعه به مستندات.\n  * **کوچک** : کاهش تکرار در کد. چندین قابلیت برای هر پارامتر (منظور پارامترهای ورودی تابع هندلر می‌باشد، به بخش [خلاصه](https://fastapi.tiangolo.com/#recap) در همین صفحه مراجعه شود). باگ کمتر.\n  * **استوار** : ایجاد کدی آماده برای استفاده در محیط پروداکشن و تولید خودکار مستندات تعاملی\n  * **مبتنی بر استانداردها** : مبتنی بر (و منطبق با) استانداردهای متن باز مربوط به API: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (سوگر سابق) و [JSON Schema](https://json-schema.org/).\n* تخمین‌ها بر اساس تست‌های انجام شده در یک تیم توسعه داخلی که مشغول ایجاد برنامه‌های کاربردی واقعی بودند صورت گرفته است.\n## اسپانسرهای طلایی¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\")\n[](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-\nbadge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI\nfiles\")\n[](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge\n\"Auth, user management and more for your B2B product\")\n[](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and\nMonetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab -\nGenerate SDKs from FastAPI\") [](https://docs.render.com/deploy-\nfastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy\n& scale any full-stack web app on Render. Focus on building apps, not infra.\")\n[](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi\n\"Cut Code Review Time & Bugs in Half with CodeRabbit\")\n[](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-\nsource \"The Gold Standard in Retail Account Linking\")\n[](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi\n\"Deploy enterprise applications at startup speed\")\n[](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\")\n[دیگر اسپانسرها](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## نظر دیگران در مورد FastAPI¶\n_[...] I'm using**FastAPI** a ton these days. [...] I'm actually planning to\nuse it for all of my team's **ML services at Microsoft**. Some of them are\ngetting integrated into the core **Windows** product and some **Office**\nproducts.\"_\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n_\"We adopted the**FastAPI** library to spawn a **REST** server that can be\nqueried to obtain **predictions**. [for Ludwig]\"_\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"**Netflix** is pleased to announce the open-source release of our **crisis\nmanagement** orchestration framework: **Dispatch**! [built with **FastAPI**]\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_I’m over the moon excited about**FastAPI**. It’s so fun!\"_\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcast host**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honestly, what you've built looks super solid and polished. In many ways,\nit's what I wanted**Hug** to be - it's really inspiring to see someone build\nthat.\"_\nTimothy Crosley - **[Hug](https://github.com/hugapi/hug) creator**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_If you're looking to learn one**modern framework** for building REST APIs,\ncheck out **FastAPI** [...] It's fast, easy to use and easy to learn [...]\"_\n\"_We've switched over to**FastAPI** for our **APIs** [...] I think you'll like\nit [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai)\nfounders - [spaCy](https://spacy.io) creators**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n## **Typer** , فریم‌ورکی معادل FastAPI برای کار با واسط خط فرمان¶\n[](https://typer.tiangolo.com)\nاگر در حال ساختن برنامه‌ای برای استفاده در CLI (به جای استفاده در وب) هستید،\nمی‌توانید از [**Typer**](https://typer.tiangolo.com/). استفاده کنید.\n**Typer** دوقلوی کوچکتر FastAPI است و قرار است معادلی برای FastAPI در\nبرنامه‌های CLI باشد.️ 🚀\n## نیازمندی‌ها¶\nپایتون +۳.۶\nFastAPI مبتنی بر ابزارهای قدرتمند زیر است:\n  * فریم‌ورک [Starlette](https://www.starlette.dev/) برای بخش وب.\n  * کتابخانه [Pydantic](https://docs.pydantic.dev/) برای بخش داده‌.\n## نصب¶\n    $ pip install fastapi\n    ---> 100%\nنصب یک سرور پروداکشن نظیر [Uvicorn](https://www.uvicorn.dev) یا\n[Hypercorn](https://github.com/pgjones/hypercorn) نیز جزء نیازمندی‌هاست.\n    $ pip install \"uvicorn[standard]\"\n    ---> 100%\n## مثال¶\n### ایجاد کنید¶\n  * فایلی به نام `main.py` با محتوای زیر ایجاد کنید:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nهمچنین می‌توانید از `async def`... نیز استفاده کنید\nاگر در کدتان از `async` / `await` استفاده می‌کنید، از `async def` برای تعریف\nتابع خود استفاده کنید:\n    from typing import Optional\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Optional[str] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**توجه** :\nاگر با `async / await` آشنا نیستید، به بخش _\"عجله‌ دارید?\"_ در صفحه درباره\n[`async` و `await` در مستندات](https://fastapi.tiangolo.com/async/#in-a-hurry)\nمراجعه کنید.\n### اجرا کنید¶\nبا استفاده از دستور زیر سرور را اجرا کنید:\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nدرباره دستور `uvicorn main:app --reload`...\nدستور `uvicorn main:app` شامل موارد زیر است:\n  * `main`: فایل `main.py` (ماژول پایتون ایجاد شده).\n  * `app`: شیء ایجاد شده در فایل `main.py` در خط `app = FastAPI()`.\n  * `--reload`: ریستارت کردن سرور با تغییر کد. تنها در هنگام توسعه از این گزینه استفاده شود..\n### بررسی کنید¶\nآدرس <http://127.0.0.1:8000/items/5?q=somequery> را در مرورگر خود باز کنید.\nپاسخ JSON زیر را مشاهده خواهید کرد:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nتا اینجا شما APIای ساختید که:\n  * درخواست‌های HTTP به _مسیرهای_ `/` و `/items/{item_id}` را دریافت می‌کند.\n  * هردو _مسیر_ عملیات (یا HTTP _متد_) `GET` را پشتیبانی می‌کند.\n  * _مسیر_ `/items/{item_id}` شامل _پارامتر مسیر_ `item_id` از نوع `int` است.\n  * _مسیر_ `/items/{item_id}` شامل _پارامتر پرسمان_ اختیاری `q` از نوع `str` است.\n### مستندات API تعاملی¶\nحال به آدرس <http://127.0.0.1:8000/docs> بروید.\nمستندات API تعاملی (ایجاد شده به کمک [Swagger UI](https://github.com/swagger-\napi/swagger-ui)) را مشاهده خواهید کرد:\n### مستندات API جایگزین¶\nحال به آدرس <http://127.0.0.1:8000/redoc> بروید.\nمستندات خودکار دیگری را مشاهده خواهید کرد که به کمک\n[ReDoc](https://github.com/Rebilly/ReDoc) ایجاد می‌شود:\n## تغییر مثال¶\nحال فایل `main.py` را مطابق زیر ویرایش کنید تا بتوانید بدنه یک درخواست `PUT`\nرا دریافت کنید.\nبه کمک Pydantic بدنه درخواست را با انواع استاندارد پایتون تعریف کنید.\n    from typing import Optional\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nسرور به صورت خودکار ری‌استارت می‌شود (زیرا پیشتر از گزینه `--reload` در دستور\n`uvicorn` استفاده کردیم).\n### تغییر مستندات API تعاملی¶\nمجددا به آدرس <http://127.0.0.1:8000/docs> بروید.\n  * مستندات API تعاملی به صورت خودکار به‌روز شده است و شامل بدنه تعریف شده در مرحله قبل است:\n  * روی دکمه \"Try it out\" کلیک کنید، اکنون می‌توانید پارامترهای مورد نیاز هر API را مشخص کرده و به صورت مستقیم با آنها تعامل کنید:\n  * سپس روی دکمه \"Execute\" کلیک کنید، خواهید دید که واسط کاربری با APIهای تعریف شده ارتباط برقرار کرده، پارامترهای مورد نیاز را به آن‌ها ارسال می‌کند، سپس نتایج را دریافت کرده و در صفحه نشان می‌دهد:\n### تغییر مستندات API جایگزین¶\nحال به آدرس <http://127.0.0.1:8000/redoc> بروید.\n  * خواهید دید که مستندات جایگزین نیز به‌روزرسانی شده و شامل پارامتر پرسمان و بدنه تعریف شده می‌باشد:\n### خلاصه¶\nبه طور خلاصه شما **یک بار** انواع پارامترها، بدنه و غیره را به عنوان\nپارامترهای ورودی تابع خود تعریف می‌کنید.\nاین کار را با استفاده از انواع استاندارد و مدرن موجود در پایتون انجام می‌دهید.\nنیازی به یادگیری نحو جدید یا متدها و کلاس‌های یک کتابخانه بخصوص و غیره نیست.\nتنها **پایتون +۳.۶**.\nبه عنوان مثال برای یک پارامتر از نوع `int`:\n    item_id: int\nیا برای یک مدل پیچیده‌تر مثل `Item`:\n    item: Item\n...و با همین اعلان تمامی قابلیت‌های زیر در دسترس قرار می‌گیرد:\n  * پشتیبانی ویرایشگر متنی شامل:\n    * تکمیل کد.\n    * بررسی انواع داده.\n  * اعتبارسنجی داده:\n    * خطاهای خودکار و مشخص در هنگام نامعتبر بودن داده.\n    * اعتبارسنجی، حتی برای اشیاء JSON تو در تو.\n  * تبدیل داده ورودی: که از شبکه رسیده به انواع و داد‌ه‌ پایتونی. این داده‌ شامل:\n    * JSON.\n    * پارامترهای مسیر.\n    * پارامترهای پرسمان.\n    * کوکی‌ها.\n    * سرآیند‌ها (هدرها).\n    * فرم‌ها.\n    * فایل‌ها.\n  * تبدیل داده خروجی: تبدیل از انواع و داده‌ پایتون به داده شبکه (مانند JSON):\n    * تبدیل انواع داده پایتونی (`str`, `int`, `float`, `bool`, `list` و غیره).\n    * اشیاء `datetime`.\n    * اشیاء `UUID`.\n    * qمدل‌های پایگاه‌داده.\n    * و موارد بیشمار دیگر.\n  * دو مدل مستند API تعاملی خودکار :\n    * Swagger UI.\n    * ReDoc.\n* * *\nبه مثال قبلی باز می‌گردیم، در این مثال **FastAPI** موارد زیر را انجام می‌دهد:\n  * اعتبارسنجی اینکه پارامتر `item_id` در مسیر درخواست‌های `GET` و `PUT` موجود است.\n  * اعتبارسنجی اینکه پارامتر `item_id` در درخواست‌های `GET` و `PUT` از نوع `int` است.\n    * اگر غیر از این موارد باشد، سرویس‌گیرنده خطای مفید و مشخصی دریافت خواهد کرد.\n  * بررسی وجود پارامتر پرسمان اختیاری `q` (مانند `http://127.0.0.1:8000/items/foo?q=somequery`) در درخواست‌های `GET`.\n    * از آنجا که پارامتر `q` با `= None` مقداردهی شده است، این پارامتر اختیاری است.\n    * اگر از مقدار اولیه `None` استفاده نکنیم، این پارامتر الزامی خواهد بود (همانند بدنه درخواست در درخواست `PUT`).\n  * برای درخواست‌های `PUT` به آدرس `/items/{item_id}`، بدنه درخواست باید از نوع JSON تعریف شده باشد:\n    * بررسی اینکه بدنه شامل فیلدی با نام `name` و از نوع `str` است.\n    * بررسی اینکه بدنه شامل فیلدی با نام `price` و از نوع `float` است.\n    * بررسی اینکه بدنه شامل فیلدی اختیاری با نام `is_offer` است، که در صورت وجود باید از نوع `bool` باشد.\n    * تمامی این موارد برای اشیاء JSON در هر عمقی قابل بررسی می‌باشد.\n  * تبدیل از/به JSON به صورت خودکار.\n  * مستندسازی همه چیز با استفاده از OpenAPI، که می‌توان از آن برای موارد زیر استفاده کرد:\n    * سیستم مستندات تعاملی.\n    * تولید خودکار کد سرویس‌گیرنده‌ در زبان‌های برنامه‌نویسی بیشمار.\n  * فراهم سازی ۲ مستند تعاملی مبتنی بر وب به صورت پیش‌فرض.\n* * *\nموارد ذکر شده تنها پاره‌ای از ویژگی‌های بیشمار FastAPI است اما ایده‌ای کلی از\nطرز کار آن در اختیار قرار می‌دهد.\nخط زیر را به این صورت تغییر دهید:\n        return {\"item_name\": item.name, \"item_id\": item_id}\nاز:\n            ... \"item_name\": item.name ...\nبه:\n            ... \"item_price\": item.price ...\nدر حین تایپ کردن توجه کنید که چگونه ویرایش‌گر، ویژگی‌های کلاس `Item` را تشخیص\nداده و به تکمیل خودکار آنها کمک می‌کند:\nبرای مشاهده مثال‌های کامل‌تر که شامل قابلیت‌های بیشتری از FastAPI باشد به بخش\n[آموزش - راهنمای کاربر](https://fastapi.tiangolo.com/tutorial/) مراجعه کنید.\n**هشدار اسپویل** : بخش آموزش - راهنمای کاربر شامل موارد زیر است:\n  * اعلان **پارامترهای** موجود در بخش‌های دیگر درخواست، شامل: **سرآیند‌ (هدر)ها** ، **کوکی‌ها** ، **فیلد‌های فرم** و **فایل‌ها**.\n  * چگونگی تنظیم **محدودیت‌های اعتبارسنجی** به عنوان مثال `maximum_length` یا `regex`.\n  * سیستم **Dependency Injection** قوی و کاربردی.\n  * امنیت و تایید هویت, شامل پشتیبانی از **OAuth2** مبتنی بر **JWT tokens** و **HTTP Basic**.\n  * تکنیک پیشرفته برای تعریف **مدل‌های چند سطحی JSON** (بر اساس Pydantic).\n  * قابلیت‌های اضافی دیگر (بر اساس Starlette) شامل:\n    * **وب‌سوکت**\n    * **GraphQL**\n    * تست‌های خودکار آسان مبتنی بر HTTPX و `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * و موارد بیشمار دیگر.\n## کارایی¶\nمعیار (بنچمارک‌)های مستقل TechEmpower حاکی از آن است که برنامه‌های **FastAPI**\nکه تحت Uvicorn اجرا می‌شود، [یکی از سریع‌ترین فریم‌ورک‌های مبتنی بر\nپایتون](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7)،\nاست که کمی ضعیف‌تر از Starlette و Uvicorn عمل می‌کند (فریم‌ورک و سروری که\nFastAPI بر اساس آنها ایجاد شده است) (*)\nبرای درک بهتری از این موضوع به بخش\n[بنچ‌مارک‌ها](https://fastapi.tiangolo.com/benchmarks/) مراجعه کنید.\n## نیازمندی‌های اختیاری¶\nاستفاده شده توسط Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- برای اعتبارسنجی آدرس‌های ایمیل.\nاستفاده شده توسط Starlette:\n  * [`HTTPX`](https://www.python-httpx.org) \\- در صورتی که می‌خواهید از `TestClient` استفاده کنید.\n  * [`aiofiles`](https://github.com/Tinche/aiofiles) \\- در صورتی که می‌خواهید از `FileResponse` و `StaticFiles` استفاده کنید.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- در صورتی که بخواهید از پیکربندی پیش‌فرض برای قالب‌ها استفاده کنید.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- در صورتی که بخواهید با استفاده از `request.form()` از قابلیت \"تجزیه (parse)\" فرم استفاده کنید.\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- در صورتی که بخواید از `SessionMiddleware` پشتیبانی کنید.\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- برای پشتیبانی `SchemaGenerator` در Starlet (به احتمال زیاد برای کار کردن با FastAPI به آن نیازی پیدا نمی‌کنید).\n  * [`graphene`](https://graphene-python.org/) \\- در صورتی که از `GraphQLApp` پشتیبانی می‌کنید.\nاستفاده شده توسط FastAPI / Starlette:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- برای سرور اجرا کننده برنامه وب.\n  * [`orjson`](https://github.com/ijl/orjson) \\- در صورتی که بخواهید از `ORJSONResponse` استفاده کنید.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- در صورتی که بخواهید از `UJSONResponse` استفاده کنید.\nمی‌توان همه این موارد را با استفاده از دستور `pip install fastapi[all]`. به\nصورت یکجا نصب کرد.\n## لایسنس¶\nاین پروژه مشمول قوانین و مقررات لایسنس MIT است.\nبرگشت به بالا\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: convertir el string que viene de un request HTTP en datos de Python\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون",
    "length": 17972,
    "links": [
      "https://fastapi.tiangolo.com/fr/",
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/fa/features/",
      "https://fastapi.tiangolo.com/fa/learn/",
      "https://fastapi.tiangolo.com/fa/reference/",
      "https://fastapi.tiangolo.com/fa/fastapi-people/",
      "https://fastapi.tiangolo.com/fa/resources/",
      "https://fastapi.tiangolo.com/fa/about/",
      "https://fastapi.tiangolo.com/fa/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/fa/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/fr/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_Framework FastAPI, haute performance, facile à apprendre, rapide à coder,\nprêt pour la production_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Documentation** : <https://fastapi.tiangolo.com>\n**Code Source** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI est un framework web moderne et rapide (haute performance) pour la\ncréation d'API avec Python, basé sur les annotations de type standard de\nPython.\nLes principales fonctionnalités sont :\n  * **Rapidité** : De très hautes performances, au niveau de **NodeJS** et **Go** (grâce à Starlette et Pydantic). L'un des frameworks Python les plus rapides.\n  * **Rapide à coder** : Augmente la vitesse de développement des fonctionnalités d'environ 200 % à 300 %. *\n  * **Moins de bugs** : Réduit d'environ 40 % les erreurs induites par le développeur. *\n  * **Intuitif** : Excellente compatibilité avec les IDE. Complétion complète. Moins de temps passé à déboguer.\n  * **Facile** : Conçu pour être facile à utiliser et à apprendre. Moins de temps passé à lire la documentation.\n  * **Concis** : Diminue la duplication de code. De nombreuses fonctionnalités liées à la déclaration de chaque paramètre. Moins de bugs.\n  * **Robuste** : Obtenez un code prêt pour la production. Avec une documentation interactive automatique.\n  * **Basé sur des normes** : Basé sur (et entièrement compatible avec) les standards ouverts pour les APIs : [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (précédemment connu sous le nom de Swagger) et [JSON Schema](https://json-schema.org/).\n* estimation basée sur des tests d'une équipe de développement interne, construisant des applications de production.\n## Sponsors¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Other sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## Opinions¶\n\"_[...] J'utilise beaucoup**FastAPI** ces derniers temps. [...] Je prévois de\nl'utiliser dans mon équipe pour tous les **services de ML chez Microsoft**.\nCertains d'entre eux seront intégrés dans le coeur de **Windows** et dans\ncertains produits **Office**._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_Nous avons adopté la bibliothèque**FastAPI** pour créer un serveur **REST**\nqui peut être interrogé pour obtenir des **prédictions**. [pour Ludwig]_\"\nPiero Molino, Yaroslav Dudin et Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** a le plaisir d'annoncer la sortie en open-source de notre\nframework d'orchestration de **gestion de crise** : **Dispatch** ! [construit\navec **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_Je suis très enthousiaste à propos de**FastAPI**. C'est un bonheur !_\"\nBrian Okken - **Auteur du podcast[Python\nBytes](https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-\nwrongs?time_in_sec=855)**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honnêtement, ce que vous avez construit a l'air super solide et élégant. A\nbien des égards, c'est comme ça que je voulais que**Hug** soit - c'est\nvraiment inspirant de voir quelqu'un construire ça._\"\nTimothy Crosley - **Créateur de[Hug](https://github.com/hugapi/hug)**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_Si vous cherchez à apprendre un**framework moderne** pour créer des APIs\nREST, regardez **FastAPI** [...] C'est rapide, facile à utiliser et à\napprendre [...]_\"\n\"_Nous sommes passés à**FastAPI** pour nos **APIs** [...] Je pense que vous\nl'aimerez [...]_\"\nInes Montani - Matthew Honnibal - **Fondateurs de[Explosion\nAI](https://explosion.ai) \\- Créateurs de [spaCy](https://spacy.io)**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_Si quelqu'un cherche à construire une API Python de production, je\nrecommande vivement**FastAPI**. Il est **bien conçu** , **simple à utiliser**\net **très évolutif**. Il est devenu un **composant clé** dans notre stratégie\nde développement API first et il est à l'origine de nombreux automatismes et\nservices tels que notre ingénieur virtuel TAC._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , le FastAPI des CLI¶\n[](https://typer.tiangolo.com)\nSi vous souhaitez construire une application CLI utilisable dans un terminal\nau lieu d'une API web, regardez [**Typer**](https://typer.tiangolo.com/).\n**Typer** est le petit frère de FastAPI. Et il est destiné à être le **FastAPI\ndes CLI**. ⌨️ 🚀\n## Prérequis¶\nFastAPI repose sur les épaules de géants :\n  * [Starlette](https://www.starlette.dev/) pour les parties web.\n  * [Pydantic](https://docs.pydantic.dev/) pour les parties données.\n## Installation¶\n    $ pip install fastapi\n    ---> 100%\nVous aurez également besoin d'un serveur ASGI pour la production tel que\n[Uvicorn](https://www.uvicorn.dev) ou\n[Hypercorn](https://github.com/pgjones/hypercorn).\n    $ pip install \"uvicorn[standard]\"\n    ---> 100%\n## Exemple¶\n### Créez¶\n  * Créez un fichier `main.py` avec :\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nOu utilisez `async def` ...\nSi votre code utilise `async` / `await`, utilisez `async def` :\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Note**\nSi vous n'êtes pas familier avec cette notion, consultez la section _\"Vous\nêtes pressés ?\"_ à propos de [`async` et `await` dans la\ndocumentation](https://fastapi.tiangolo.com/fr/async/#vous-etes-presses).\n### Lancez¶\nLancez le serveur avec :\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nÀ propos de la commande `uvicorn main:app --reload` ...\nLa commande `uvicorn main:app` fait référence à :\n  * `main` : le fichier `main.py` (le \"module\" Python).\n  * `app` : l'objet créé à l'intérieur de `main.py` avec la ligne `app = FastAPI()`.\n  * `--reload` : fait redémarrer le serveur après des changements de code. À n'utiliser que pour le développement.\n### Vérifiez¶\nOuvrez votre navigateur à l'adresse\n<http://127.0.0.1:8000/items/5?q=somequery>.\nVous obtenez alors cette réponse JSON :\n    {\"item_id\": 5, \"q\": \"somequery\"}\nVous venez de créer une API qui :\n  * Reçoit les requêtes HTTP pour les _chemins_ `/` et `/items/{item_id}`.\n  * Les deux _chemins_ acceptent des _opérations_ `GET` (également connu sous le nom de _méthodes_ HTTP).\n  * Le _chemin_ `/items/{item_id}` a un _paramètre_ `item_id` qui doit être un `int`.\n  * Le _chemin_ `/items/{item_id}` a un _paramètre de requête_ optionnel `q` de type `str`.\n### Documentation API interactive¶\nMaintenant, rendez-vous sur <http://127.0.0.1:8000/docs>.\nVous verrez la documentation interactive automatique de l'API (fournie par\n[Swagger UI](https://github.com/swagger-api/swagger-ui)) :\n### Documentation API alternative¶\nEt maintenant, rendez-vous sur <http://127.0.0.1:8000/redoc>.\nVous verrez la documentation interactive automatique de l'API (fournie par\n[ReDoc](https://github.com/Rebilly/ReDoc)) :\n## Exemple plus poussé¶\nMaintenant, modifiez le fichier `main.py` pour recevoir le corps d'une requête\n`PUT`.\nDéclarez ce corps en utilisant les types Python standards, grâce à Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nLe serveur se recharge normalement automatiquement (car vous avez pensé à\n`--reload` dans la commande `uvicorn` ci-dessus).\n### Plus loin avec la documentation API interactive¶\nMaintenant, rendez-vous sur <http://127.0.0.1:8000/docs>.\n  * La documentation interactive de l'API sera automatiquement mise à jour, y compris le nouveau corps de la requête :\n  * Cliquez sur le bouton \"Try it out\", il vous permet de renseigner les paramètres et d'interagir directement avec l'API :\n  * Cliquez ensuite sur le bouton \"Execute\", l'interface utilisateur communiquera avec votre API, enverra les paramètres, obtiendra les résultats et les affichera à l'écran :\n### Plus loin avec la documentation API alternative¶\nEt maintenant, rendez-vous sur <http://127.0.0.1:8000/redoc>.\n  * La documentation alternative reflétera également le nouveau paramètre de requête et le nouveau corps :\n### En résumé¶\nEn résumé, vous déclarez **une fois** les types de paramètres, le corps de la\nrequête, etc. en tant que paramètres de fonction.\nVous faites cela avec les types Python standard modernes.\nVous n'avez pas à apprendre une nouvelle syntaxe, les méthodes ou les classes\nd'une bibliothèque spécifique, etc.\nJuste du **Python** standard.\nPar exemple, pour un `int`:\n    item_id: int\nou pour un modèle `Item` plus complexe :\n    item: Item\n... et avec cette déclaration unique, vous obtenez :\n  * Une assistance dans votre IDE, notamment :\n    * la complétion.\n    * la vérification des types.\n  * La validation des données :\n    * des erreurs automatiques et claires lorsque les données ne sont pas valides.\n    * une validation même pour les objets JSON profondément imbriqués.\n  * Une conversion des données d'entrée : venant du réseau et allant vers les données et types de Python, permettant de lire :\n    * le JSON.\n    * les paramètres du chemin.\n    * les paramètres de la requête.\n    * les cookies.\n    * les en-têtes.\n    * les formulaires.\n    * les fichiers.\n  * La conversion des données de sortie : conversion des données et types Python en données réseau (au format JSON), permettant de convertir :\n    * les types Python (`str`, `int`, `float`, `bool`, `list`, etc).\n    * les objets `datetime`.\n    * les objets `UUID`.\n    * les modèles de base de données.\n    * ... et beaucoup plus.\n  * La documentation API interactive automatique, avec 2 interfaces utilisateur au choix :\n    * Swagger UI.\n    * ReDoc.\n* * *\nPour revenir à l'exemple de code précédent, **FastAPI** permet de :\n  * Valider que `item_id` existe dans le chemin des requêtes `GET` et `PUT`.\n  * Valider que `item_id` est de type `int` pour les requêtes `GET` et `PUT`.\n    * Si ce n'est pas le cas, le client voit une erreur utile et claire.\n  * Vérifier qu'il existe un paramètre de requête facultatif nommé `q` (comme dans `http://127.0.0.1:8000/items/foo?q=somequery`) pour les requêtes `GET`.\n    * Puisque le paramètre `q` est déclaré avec `= None`, il est facultatif.\n    * Sans le `None`, il serait nécessaire (comme l'est le corps de la requête dans le cas du `PUT`).\n  * Pour les requêtes `PUT` vers `/items/{item_id}`, de lire le corps en JSON :\n    * Vérifier qu'il a un attribut obligatoire `name` qui devrait être un `str`.\n    * Vérifier qu'il a un attribut obligatoire `prix` qui doit être un `float`.\n    * Vérifier qu'il a un attribut facultatif `is_offer`, qui devrait être un `bool`, s'il est présent.\n    * Tout cela fonctionnerait également pour les objets JSON profondément imbriqués.\n  * Convertir de et vers JSON automatiquement.\n  * Documenter tout avec OpenAPI, qui peut être utilisé par :\n    * Les systèmes de documentation interactifs.\n    * Les systèmes de génération automatique de code client, pour de nombreuses langues.\n  * Fournir directement 2 interfaces web de documentation interactive.\n* * *\nNous n'avons fait qu'effleurer la surface, mais vous avez déjà une idée de la\nfaçon dont tout cela fonctionne.\nEssayez de changer la ligne contenant :\n        return {\"item_name\": item.name, \"item_id\": item_id}\n... de :\n            ... \"item_name\": item.name ...\n... vers :\n            ... \"item_price\": item.price ...\n... et voyez comment votre éditeur complétera automatiquement les attributs et\nconnaîtra leurs types :\nPour un exemple plus complet comprenant plus de fonctionnalités, voir le\n[Tutoriel - Guide utilisateur](https://fastapi.tiangolo.com/fr/tutorial/).\n**Spoiler alert** : le tutoriel - guide utilisateur inclut :\n  * Déclaration de **paramètres** provenant d'autres endroits différents comme : **en-têtes.**, **cookies** , **champs de formulaire** et **fichiers**.\n  * L'utilisation de **contraintes de validation** comme `maximum_length` ou `regex`.\n  * Un **système d'injection de dépendance** très puissant et facile à utiliser .\n  * Sécurité et authentification, y compris la prise en charge de **OAuth2** avec les **jetons JWT** et l'authentification **HTTP Basic**.\n  * Des techniques plus avancées (mais tout aussi faciles) pour déclarer les **modèles JSON profondément imbriqués** (grâce à Pydantic).\n  * Intégration de **GraphQL** avec [Strawberry](https://strawberry.rocks) et d'autres bibliothèques.\n  * D'obtenir de nombreuses fonctionnalités supplémentaires (grâce à Starlette) comme :\n    * **WebSockets**\n    * de tester le code très facilement avec `requests` et `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ... et plus encore.\n## Performance¶\nLes benchmarks TechEmpower indépendants montrent que les applications\n**FastAPI** s'exécutant sous Uvicorn sont [ parmi les frameworks existants en\nPython les plus rapides\n](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\njuste derrière Starlette et Uvicorn (utilisés en interne par FastAPI). (*)\nPour en savoir plus, consultez la section\n[Benchmarks](https://fastapi.tiangolo.com/fr/benchmarks/).\n## Dépendances facultatives¶\nUtilisées par Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- pour la validation des adresses email.\nUtilisées par Starlette :\n  * [`requests`](https://requests.readthedocs.io) \\- Obligatoire si vous souhaitez utiliser `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Obligatoire si vous souhaitez utiliser la configuration de template par défaut.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Obligatoire si vous souhaitez supporter le \"décodage\" de formulaire avec `request.form()`.\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- Obligatoire pour la prise en charge de `SessionMiddleware`.\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- Obligatoire pour le support `SchemaGenerator` de Starlette (vous n'en avez probablement pas besoin avec FastAPI).\nUtilisées par FastAPI / Starlette :\n  * [`uvicorn`](https://www.uvicorn.dev) \\- Pour le serveur qui charge et sert votre application.\n  * [`orjson`](https://github.com/ijl/orjson) \\- Obligatoire si vous voulez utiliser `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- Obligatoire si vous souhaitez utiliser `UJSONResponse`.\nVous pouvez tout installer avec `pip install fastapi[all]`.\n## Licence¶\nCe projet est soumis aux termes de la licence MIT.\nRetour en haut de la page\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: convertir el string que viene de un request HTTP en datos de Python\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python",
    "length": 21163,
    "links": [
      "https://fastapi.tiangolo.com/ja/",
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/fr/features/",
      "https://fastapi.tiangolo.com/fr/learn/",
      "https://fastapi.tiangolo.com/fr/reference/",
      "https://fastapi.tiangolo.com/fr/fastapi-people/",
      "https://fastapi.tiangolo.com/fr/resources/",
      "https://fastapi.tiangolo.com/fr/about/",
      "https://fastapi.tiangolo.com/fr/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/fr/async/",
      "https://fastapi.tiangolo.com/fr/tutorial/",
      "https://fastapi.tiangolo.com/fr/benchmarks/",
      "https://fastapi.tiangolo.com/fr/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/ja/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_FastAPI framework, high performance, easy to learn, fast to code, ready for\nproduction_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**ドキュメント** : <https://fastapi.tiangolo.com>\n**ソースコード** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI は、Pythonの標準である型ヒントに基づいてPython 以降でAPI を構築するための、モダンで、高速(高パフォーマンス)な、Web\nフレームワークです。\n主な特徴:\n  * **高速** : **NodeJS** や **Go** 並みのとても高いパフォーマンス (Starlette と Pydantic のおかげです)。 最も高速な Python フレームワークの一つです.\n  * **高速なコーディング** : 開発速度を約 200%~300%向上させます。 *\n  * **少ないバグ** : 開発者起因のヒューマンエラーを約 40％削減します。 *\n  * **直感的** : 素晴らしいエディタのサポートや オートコンプリート。 デバッグ時間を削減します。\n  * **簡単** : 簡単に利用、習得できるようにデザインされています。ドキュメントを読む時間を削減します。\n  * **短い** : コードの重複を最小限にしています。各パラメータからの複数の機能。少ないバグ。\n  * **堅牢性** : 自動対話ドキュメントを使用して、本番環境で使用できるコードを取得します。\n  * **Standards-based** : API のオープンスタンダードに基づいており、完全に互換性があります: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (以前は Swagger として知られていました) や [JSON スキーマ](https://json-schema.org/).\n* 本番アプリケーションを構築している開発チームのテストによる見積もり。\n## Sponsors¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Other sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## 評価¶\n\"_[...] 最近**FastAPI** を使っています。 [...] 実際に私のチームの全ての **Microsoft の機械学習サービス**\nで使用する予定です。 そのうちのいくつかのコアな**Windows** 製品と**Office** 製品に統合されつつあります。_\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_FastAPIライブラリを採用し、クエリで**予測値** を取得できる**REST** サーバを構築しました。 [for Ludwig]_\"\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** は、**危機管理** オーケストレーションフレームワーク、**Dispatch**\nのオープンソースリリースを発表できることをうれしく思います。 [built with **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_私は**FastAPI** にワクワクしています。 めちゃくちゃ楽しいです！_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcast host**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_正直、超堅実で洗練されているように見えます。いろんな意味で、それは私がハグしたかったものです。_ \"\nTimothy Crosley - **[Hug](https://github.com/hugapi/hug) creator**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_REST API を構築するための**モダンなフレームワーク** を学びたい方は、**FastAPI** [...] をチェックしてみてください。\n[...] 高速で, 使用、習得が簡単です。[...]_\"\n\"_私たちの**API** は**FastAPI** に切り替えました。[...] きっと気に入ると思います。 [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai)\nfounders - [spaCy](https://spacy.io) creators**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n## **Typer** , the FastAPI of CLIs¶\n[](https://typer.tiangolo.com)\nもし Web API\nの代わりにターミナルで使用するCLIアプリを構築する場合は、[**Typer**](https://typer.tiangolo.com/)を確認してください。\n**Typer** は FastAPI の弟分です。そして、**CLI 版 の FastAPI** を意味しています。\n## 必要条件¶\nFastAPI は巨人の肩の上に立っています。\n  * Web の部分は[Starlette](https://www.starlette.dev/)\n  * データの部分は[Pydantic](https://docs.pydantic.dev/)\n## インストール¶\n    $ pip install fastapi\n    ---> 100%\n本番環境では、[Uvicorn](https://www.uvicorn.dev) または、\n[Hypercorn](https://github.com/pgjones/hypercorn)のような、 ASGI サーバーが必要になります。\n    $ pip install \"uvicorn[standard]\"\n    ---> 100%\n## アプリケーション例¶\n### アプリケーションの作成¶\n  * `main.py` を作成し、以下のコードを入力します:\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: str = None):\n        return {\"item_id\": item_id, \"q\": q}\nまたは`async def`を使います...\n`async` / `await`を使用するときは、 `async def`を使います:\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: str = None):\n        return {\"item_id\": item_id, \"q\": q}\n**注** :\nわからない場合は、[ドキュメントの`async` と `await`にある](https://fastapi.tiangolo.com/async/#in-\na-hurry)\"In a hurry?\"セクションをチェックしてください。\n### 実行¶\n以下のコマンドでサーバーを起動します:\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\n`uvicorn main:app --reload`コマンドについて\n`uvicorn main:app`コマンドは以下の項目を参照します:\n  * `main`: `main.py`ファイル (Python \"モジュール\")\n  * `app`: `main.py` の`app = FastAPI()`の行で生成されたオブジェクト\n  * `--reload`: コードを変更したらサーバーを再起動します。このオプションは開発環境でのみ使用します\n### 動作確認¶\nブラウザから<http://127.0.0.1:8000/items/5?q=somequery>を開きます。\n以下の JSON のレスポンスが確認できます:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nもうすでに以下の API が作成されています:\n  * `/` と `/items/{item_id}`のパスで HTTP リクエストを受けます。\n  * どちらのパスも `GET` _操作_ を取ります。(HTTP メソッドとしても知られています。)\n  * `/items/{item_id}` パスのパスパラメータ `item_id` は `int` でなければなりません。\n  * パス `/items/{item_id}` はオプションの `str` クエリパラメータ `q` を持ちます。\n### 自動対話型の API ドキュメント¶\n<http://127.0.0.1:8000/docs>にアクセスしてみてください。\n自動対話型の API ドキュメントが表示されます。 ([Swagger UI](https://github.com/swagger-\napi/swagger-ui)が提供しています。):\n### 代替の API ドキュメント¶\n<http://127.0.0.1:8000/redoc>にアクセスしてみてください。\n代替の自動ドキュメントが表示されます。([ReDoc](https://github.com/Rebilly/ReDoc)が提供しています。):\n## アップグレード例¶\n`PUT`リクエストからボディを受け取るために`main.py`を修正しましょう。\nPydantic によって、Python の標準的な型を使ってボディを宣言します。\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: bool = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: str = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nサーバーは自動でリロードされます。(上述の`uvicorn`コマンドで`--reload`オプションを追加しているからです。)\n### 自動対話型の API ドキュメントのアップグレード¶\n<http://127.0.0.1:8000/docs>にアクセスしましょう。\n  * 自動対話型の API ドキュメントが新しいボディも含めて自動でアップデートされます:\n  * \"Try it out\"ボタンをクリックしてください。パラメータを入力して API と直接やりとりすることができます:\n  * それから、\"Execute\" ボタンをクリックしてください。 ユーザーインターフェースは API と通信し、パラメータを送信し、結果を取得して画面に表示します:\n### 代替の API ドキュメントのアップグレード¶\n<http://127.0.0.1:8000/redoc>にアクセスしましょう。\n  * 代替の API ドキュメントにも新しいクエリパラメータやボディが反映されます。\n### まとめ¶\n要約すると、関数のパラメータとして、パラメータやボディ などの型を**一度だけ** 宣言します。\n標準的な最新の Python の型を使っています。\n新しい構文や特定のライブラリのメソッドやクラスなどを覚える必要はありません。\n単なる標準的な**3.8 以降の Python** です。\n例えば、`int`の場合:\n    item_id: int\nまたは、より複雑な`Item`モデルの場合:\n    item: Item\n...そして、この一度の宣言で、以下のようになります:\n  * 以下を含むエディタサポート:\n  * 補完\n  * タイプチェック\n  * データの検証:\n  * データが無効な場合に自動でエラーをクリアします。\n  * 深い入れ子になった JSON オブジェクトでも検証が可能です。\n  * 入力データの変換: ネットワークから Python のデータや型に変換してから読み取ります:\n  * JSON.\n  * パスパラメータ\n  * クエリパラメータ\n  * クッキー\n  * ヘッダー\n  * フォーム\n  * ファイル\n  * 出力データの変換: Python のデータや型からネットワークデータへ変換します (JSON として):\n  * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).\n  * `datetime` オブジェクト\n  * `UUID` オブジェクト\n  * データベースモデル\n  * ...などなど\n  * 2 つの代替ユーザーインターフェースを含む自動インタラクティブ API ドキュメント:\n  * Swagger UI.\n  * ReDoc.\n* * *\nコード例に戻りましょう、**FastAPI** は次のようになります:\n  * `GET`および`PUT`リクエストのパスに`item_id` があることを検証します。\n  * `item_id`が`GET`および`PUT`リクエストに対して`int` 型であることを検証します。\n  * そうでない場合は、クライアントは有用で明確なエラーが表示されます。\n  * `GET` リクエストに対してオプションのクエリパラメータ `q` (`http://127.0.0.1:8000/items/foo?q=somequery` のように) が存在するかどうかを調べます。\n  * パラメータ `q` は `= None` で宣言されているので、オプションです。\n  * `None`がなければ必須になります（`PUT`の場合のボディと同様です）。\n  * `PUT` リクエストを `/items/{item_id}` に送信する場合は、ボディを JSON として読み込みます:\n  * 必須の属性 `name` を確認してください。 それは `str` であるべきです。\n  * 必須の属性 `price` を確認してください。それは `float` でなければならないです。\n  * オプションの属性 `is_offer` を確認してください。値がある場合は、`bool` であるべきです。\n  * これらはすべて、深くネストされた JSON オブジェクトに対しても動作します。\n  * JSON から JSON に自動的に変換します。\n  * OpenAPIですべてを文書化し、以下を使用することができます:\n  * 対話的なドキュメントシステム。\n  * 多くの言語に対応した自動クライアントコード生成システム。\n  * 2 つの対話的なドキュメントのWebインターフェイスを直接提供します。\n* * *\nまだ表面的な部分に触れただけですが、もう全ての仕組みは分かっているはずです。\n以下の行を変更してみてください:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...以下を:\n            ... \"item_name\": item.name ...\n...以下のように:\n            ... \"item_price\": item.price ...\n...そして、エディタが属性を自動補完し、そのタイプを知る方法を確認してください。:\nより多くの機能を含む、より完全な例については、[チュートリアル -\nユーザーガイド](https://fastapi.tiangolo.com/tutorial/)をご覧ください。\n**ネタバレ注意** : チュートリアル - ユーザーガイドは以下の情報が含まれています:\n  * **ヘッダー** 、**クッキー** 、**フォームフィールド** 、**ファイル** などの他の場所からの **パラメータ** 宣言。\n  * `maximum_length`や`regex`のような**検証や制約** を設定する方法。\n  * 非常に強力で使いやすい **依存性注入** システム。\n  * **JWT トークン** を用いた **OAuth2** や **HTTP Basic 認証** のサポートを含む、セキュリティと認証。\n  * **深くネストされた JSON モデル** を宣言するためのより高度な（しかし同様に簡単な）技術（Pydantic のおかげです）。\n  * 以下のようなたくさんのおまけ機能(Starlette のおかげです):\n  * **WebSockets**\n  * **GraphQL**\n  * `httpx` や `pytest`をもとにした極限に簡単なテスト\n  * **CORS**\n  * **クッキーセッション**\n  * ...などなど。\n## パフォーマンス¶\n独立した TechEmpower のベンチマークでは、Uvicorn で動作する**FastAPI** アプリケーションが、[Python\nフレームワークの中で最も高速なものの 1\nつ](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7)であり、Starlette\nと Uvicorn（FastAPI で内部的に使用されています）にのみ下回っていると示されています。\n詳細は[ベンチマーク](https://fastapi.tiangolo.com/benchmarks/)セクションをご覧ください。\n## オプションの依存関係¶\nPydantic によって使用されるもの:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- E メールの検証\nStarlette によって使用されるもの:\n  * [`httpx`](https://www.python-httpx.org) \\- `TestClient`を使用するために必要です。\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- デフォルトのテンプレート設定を使用する場合は必要です。\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- \"parsing\"`request.form()`からの変換をサポートしたい場合は必要です。\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- `SessionMiddleware` サポートのためには必要です。\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- Starlette の `SchemaGenerator` サポートのために必要です。 (FastAPI では必要ないでしょう。)\n  * [`graphene`](https://graphene-python.org/) \\- `GraphQLApp` サポートのためには必要です。\nFastAPI / Starlette に使用されるもの:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- アプリケーションをロードしてサーブするサーバーのため。\n  * [`orjson`](https://github.com/ijl/orjson) \\- `ORJSONResponse`を使用したい場合は必要です。\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- `UJSONResponse`を使用する場合は必須です。\nこれらは全て `pip install fastapi[all]`でインストールできます。\n## ライセンス¶\nこのプロジェクトは MIT ライセンスです。\nページトップへ戻る\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables",
    "length": 15713,
    "links": [
      "https://fastapi.tiangolo.com/ko/",
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/ja/features/",
      "https://fastapi.tiangolo.com/ja/learn/",
      "https://fastapi.tiangolo.com/ja/reference/",
      "https://fastapi.tiangolo.com/ja/fastapi-people/",
      "https://fastapi.tiangolo.com/ja/resources/",
      "https://fastapi.tiangolo.com/ja/about/",
      "https://fastapi.tiangolo.com/ja/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/ja/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/ko/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_FastAPI 프레임워크, 고성능, 간편한 학습, 빠른 코드 작성, 준비된 프로덕션_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**문서** : <https://fastapi.tiangolo.com>\n**소스 코드** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI는 현대적이고, 빠르며(고성능), 파이썬 표준 타입 힌트에 기초한 Python의 API를 빌드하기 위한 웹 프레임워크입니다.\n주요 특징으로:\n  * **빠름** : (Starlette과 Pydantic 덕분에) **NodeJS** 및 **Go** 와 대등할 정도로 매우 높은 성능. 사용 가능한 가장 빠른 파이썬 프레임워크 중 하나.\n  * **빠른 코드 작성** : 약 200%에서 300%까지 기능 개발 속도 증가. *\n  * **적은 버그** : 사람(개발자)에 의한 에러 약 40% 감소. *\n  * **직관적** : 훌륭한 편집기 지원. 모든 곳에서 자동완성. 적은 디버깅 시간.\n  * **쉬움** : 쉽게 사용하고 배우도록 설계. 적은 문서 읽기 시간.\n  * **짧음** : 코드 중복 최소화. 각 매개변수 선언의 여러 기능. 적은 버그.\n  * **견고함** : 준비된 프로덕션 용 코드를 얻으십시오. 자동 대화형 문서와 함께.\n  * **표준 기반** : API에 대한 (완전히 호환되는) 개방형 표준 기반: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (이전에 Swagger로 알려졌던) 및 [JSON 스키마](http://json-schema.org/).\n* 내부 개발팀의 프로덕션 애플리케이션을 빌드한 테스트에 근거한 측정\n## 골드 스폰서¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[다른 스폰서](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## 의견들¶\n\"_[...] 저는 요즘**FastAPI** 를 많이 사용하고 있습니다. [...] 사실 우리 팀의 **마이크로소프트 ML 서비스** 전부를\n바꿀 계획입니다. 그중 일부는 핵심 **Windows** 와 몇몇의 **Office** 제품들이 통합되고 있습니다._\"\nKabir Khan - **마이크로소프트** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_**FastAPI** 라이브러리를 채택하여 **예측** 을 얻기 위해 쿼리를 실행 할 수 있는 **REST** 서버를 생성했습니다.\n[Ludwig을 위해]_\"\nPiero Molino, Yaroslav Dudin 그리고 Sai Sumanth Miryala - **우버**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** 는 우리의 오픈 소스 배포판인 **위기 관리** 오케스트레이션 프레임워크를 발표할 수 있어 기쁩니다: 바로\n**Dispatch** 입니다! [**FastAPI** 로 빌드]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **넷플릭스**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_**FastAPI** 가 너무 좋아서 구름 위를 걷는듯 합니다. 정말 즐겁습니다!_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) 팟캐스트 호스트**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_솔직히, 당신이 만든 것은 매우 견고하고 세련되어 보입니다. 여러 면에서**Hug** 가 이렇게 되었으면 합니다 - 그걸 만든 누군가를\n보는 것은 많은 영감을 줍니다._\"\nTimothy Crosley - **[Hug](http://www.hug.rest/) 제작자**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_REST API를 만들기 위해**현대적인 프레임워크** 를 찾고 있다면 **FastAPI** 를 확인해 보십시오. [...] 빠르고,\n쓰기 쉽고, 배우기도 쉽습니다 [...]_\"\n\"_우리**API** 를 **FastAPI** 로 바꿨습니다 [...] 아마 여러분도 좋아하실 것입니다 [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai) 설립자 -\n[spaCy](https://spacy.io) 제작자**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n## **Typer** , FastAPI의 CLI¶\n[](https://typer.tiangolo.com)\n웹 API 대신 터미널에서 사용할 CLI 앱을 만들고 있다면, [**Typer**](https://typer.tiangolo.com/)를\n확인해 보십시오.\n**Typer** 는 FastAPI의 동생입니다. 그리고 **FastAPI의 CLI** 가 되기 위해 생겼습니다. ⌨️ 🚀\n## 요구사항¶\nFastAPI는 거인들의 어깨 위에 서 있습니다:\n  * 웹 부분을 위한 [Starlette](https://www.starlette.dev/).\n  * 데이터 부분을 위한 [Pydantic](https://docs.pydantic.dev/).\n## 설치¶\n    $ pip install fastapi\n    ---> 100%\n프로덕션을 위해 [Uvicorn](http://www.uvicorn.dev) 또는\n[Hypercorn](https://github.com/pgjones/hypercorn)과 같은 ASGI 서버도 필요할 겁니다.\n    $ pip install \"uvicorn[standard]\"\n    ---> 100%\n## 예제¶\n### 만들기¶\n  * `main.py` 파일을 만드십시오:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n또는 `async def` 사용하기...\n여러분의 코드가 `async` / `await`을 사용한다면, `async def`를 사용하십시오.\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Note** :\n잘 모르겠다면, [문서에서 `async`와 `await`](https://fastapi.tiangolo.com/async/#in-a-\nhurry)에 관한 _\"급하세요?\"_ 섹션을 확인해 보십시오.\n### 실행하기¶\n서버를 실행하십시오:\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\n`uvicorn main:app --reload` 명령에 관하여...\n명령 `uvicorn main:app`은 다음을 나타냅니다:\n  * `main`: `main.py` 파일 (파이썬 \"모듈\").\n  * `app`: the object created inside of `main.py` with the line `app = FastAPI()`.\n  * `--reload`: 코드가 변경된 후 서버 재시작하기. 개발환경에서만 사용하십시오.\n### 확인하기¶\n브라우저로 <http://127.0.0.1:8000/items/5?q=somequery>를 열어보십시오.\n아래의 JSON 응답을 볼 수 있습니다:\n    {\"item_id\": 5, \"q\": \"somequery\"}\n여러분은 벌써 API를 만들었습니다:\n  * _경로_ `/` 및 `/items/{item_id}`에서 HTTP 요청 받기.\n  * 두 _경로_ 모두 `GET` _연산_(HTTP _메소드_ 로 알려진)을 받습니다.\n  * _경로_ `/items/{item_id}`는 _경로 매개변수_ `int`형 이어야 하는 `item_id`를 가지고 있습니다.\n  * _경로_ `/items/{item_id}`는 선택적인 `str`형 이어야 하는 _경로 매개변수_ `q`를 가지고 있습니다.\n### 대화형 API 문서¶\n이제 <http://127.0.0.1:8000/docs>로 가보십시오.\n자동 대화형 API 문서를 볼 수 있습니다 ([Swagger UI](https://github.com/swagger-api/swagger-\nui) 제공):\n### 대안 API 문서¶\n그리고 이제 <http://127.0.0.1:8000/redoc>로 가봅시다.\n다른 자동 문서를 볼 수 있습니다([ReDoc](https://github.com/Rebilly/ReDoc) 제공):\n## 예제 심화¶\n이제 `PUT` 요청에 있는 본문(Body)을 받기 위해 `main.py`를 수정해봅시다.\nPydantic을 이용해 파이썬 표준 타입으로 본문을 선언합니다.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\n서버가 자동으로 리로딩 할 수 있어야 합니다 (위에서 `uvicorn` 명령에 `--reload`을 추가 했기 때문입니다).\n### 대화형 API 문서 업그레이드¶\n이제 <http://127.0.0.1:8000/docs>로 이동합니다.\n  * 대화형 API 문서가 새 본문과 함께 자동으로 업데이트 합니다:\n  * \"Try it out\" 버튼을 클릭하면, 매개변수를 채울 수 있게 해주고 직접 API와 상호작용 할 수 있습니다:\n  * 그러고 나서 \"Execute\" 버튼을 누르면, 사용자 인터페이스는 API와 통신하고 매개변수를 전송하며 그 결과를 가져와서 화면에 표시합니다:\n### 대안 API 문서 업그레이드¶\n그리고 이제, <http://127.0.0.1:8000/redoc>로 이동합니다.\n  * 대안 문서 역시 새 쿼리 매개변수와 본문을 반영합니다:\n### 요약¶\n요약하면, 여러분은 매개변수의 타입, 본문 등을 함수 매개변수로서 **한번에** 선언했습니다.\n여러분은 현대 표준 파이썬 타입으로 이를 행했습니다.\n새로운 문법, 특정 라이브러리의 메소드나 클래스 등을 배울 필요가 없습니다.\n그저 표준 **Python** 입니다.\n예를 들어, `int`에 대해선:\n    item_id: int\n또는 좀 더 복잡한 `Item` 모델에 대해선:\n    item: Item\n...그리고 단 하나의 선언으로 여러분이 얻는 것은:\n  * 다음을 포함한 편집기 지원:\n    * 자동완성.\n    * 타입 검사.\n  * 데이터 검증:\n    * 데이터가 유효하지 않을 때 자동으로 생성하는 명확한 에러.\n    * 중첩된 JSON 객체에 대한 유효성 검사.\n  * 입력 데이터 변환: 네트워크에서 파이썬 데이터 및 타입으로 전송. 읽을 수 있는 것들:\n    * JSON.\n    * 경로 매개변수.\n    * 쿼리 매개변수.\n    * 쿠키.\n    * 헤더.\n    * 폼(Forms).\n    * 파일.\n  * 출력 데이터 변환: 파이썬 데이터 및 타입을 네트워크 데이터로 전환(JSON 형식으로):\n    * 파이썬 타입 변환 (`str`, `int`, `float`, `bool`, `list`, 등).\n    * `datetime` 객체.\n    * `UUID` 객체.\n    * 데이터베이스 모델.\n    * ...더 많은 것들.\n  * 대안가능한 사용자 인터페이스를 2개 포함한 자동 대화형 API 문서:\n    * Swagger UI.\n    * ReDoc.\n* * *\n이전 코드 예제로 돌아가서, **FastAPI** 는 다음처럼 처리합니다:\n  * `GET` 및 `PUT` 요청에 `item_id`가 경로에 있는지 검증.\n  * `GET` 및 `PUT` 요청에 `item_id`가 `int` 타입인지 검증.\n    * 그렇지 않다면 클라이언트는 유용하고 명확한 에러를 볼 수 있습니다.\n  * `GET` 요청에 `q`라는 선택적인 쿼리 매개변수가 검사(`http://127.0.0.1:8000/items/foo?q=somequery`처럼).\n    * `q` 매개변수는 `= None`으로 선언되었기 때문에 선택사항입니다.\n    * `None`이 없다면 필수사항입니다(`PUT`의 경우와 마찬가지로).\n  * `/items/{item_id}`으로의 `PUT` 요청은 본문을 JSON으로 읽음:\n    * `name`을 필수 속성으로 갖고 `str` 형인지 검사.\n    * `price`을 필수 속성으로 갖고 `float` 형인지 검사.\n    * 만약 주어진다면, `is_offer`를 선택 속성으로 갖고 `bool` 형인지 검사.\n    * 이 모든 것은 깊이 중첩된 JSON 객체에도 적용됩니다.\n  * JSON을 변환하거나 JSON으로 변환하는 것을 자동화.\n  * 다음에서 사용할 수 있는 모든 것을 OpenAPI로 문서화:\n    * 대화형 문서 시스템.\n    * 여러 언어들에 대한 자동 클라이언트 코드 생성 시스템.\n  * 2개의 대화형 문서 웹 인터페이스를 직접 제공.\n* * *\n우리는 그저 수박 겉 핥기만 했을 뿐인데 여러분은 벌써 어떻게 작동하는지 알고 있습니다.\n다음 줄을 바꿔보십시오:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...에서:\n            ... \"item_name\": item.name ...\n...으로:\n            ... \"item_price\": item.price ...\n...그러고 나서 여러분의 편집기가 속성과 타입을 알고 자동 완성하는지 보십시오:\n더 많은 기능을 포함한 보다 완전한 예제의 경우, [튜토리얼 - 사용자\n가이드](https://fastapi.tiangolo.com/tutorial/)를 보십시오.\n**스포일러 주의** : 튜토리얼 - 사용자 가이드는:\n  * 서로 다른 장소에서 **매개변수** 선언: **헤더** , **쿠키** , **폼 필드** 그리고 **파일**.\n  * `maximum_length` 또는 `regex`처럼 **유효성 제약** 하는 방법.\n  * 강력하고 사용하기 쉬운 **의존성 주입** 시스템.\n  * **OAuth2** 지원을 포함한 **JWT tokens** 및 **HTTP Basic** 을 갖는 보안과 인증.\n  * (Pydantic 덕분에) **깊은 중첩 JSON 모델** 을 선언하는데 더 진보한 (하지만 마찬가지로 쉬운) 기술.\n  * (Starlette 덕분에) 많은 추가 기능:\n    * **웹 소켓**\n    * **GraphQL**\n    * HTTPX 및 `pytest`에 기반한 극히 쉬운 테스트\n    * **CORS**\n    * **쿠키 세션**\n    * ...기타 등등.\n## 성능¶\n독립된 TechEmpower 벤치마크에서 Uvicorn에서 작동하는 FastAPI 어플리케이션이 [사용 가능한 가장 빠른 프레임워크 중\n하나](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7)로\nStarlette와 Uvicorn(FastAPI에서 내부적으로 사용)에만 밑돌고 있습니다. (*)\n자세한 내용은 [벤치마크](https://fastapi.tiangolo.com/benchmarks/) 섹션을 보십시오.\n## 선택가능한 의존성¶\nPydantic이 사용하는:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- 이메일 유효성 검사.\nStarlette이 사용하는:\n  * [`HTTPX`](https://www.python-httpx.org) \\- `TestClient`를 사용하려면 필요.\n  * [`jinja2`](http://jinja.pocoo.org) \\- 기본 템플릿 설정을 사용하려면 필요.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- `request.form()`과 함께 \"parsing\"의 지원을 원하면 필요.\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- `SessionMiddleware` 지원을 위해 필요.\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- Starlette의 `SchemaGenerator` 지원을 위해 필요 (FastAPI와 쓸때는 필요 없을 것입니다).\n  * [`graphene`](https://graphene-python.org/) \\- `GraphQLApp` 지원을 위해 필요.\nFastAPI / Starlette이 사용하는:\n  * [`uvicorn`](http://www.uvicorn.dev) \\- 애플리케이션을 로드하고 제공하는 서버.\n  * [`orjson`](https://github.com/ijl/orjson) \\- `ORJSONResponse`을 사용하려면 필요.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- `UJSONResponse`를 사용하려면 필요.\n`pip install fastapi[all]`를 통해 이 모두를 설치 할 수 있습니다.\n## 라이센스¶\n이 프로젝트는 MIT 라이센스 조약에 따라 라이센스가 부여됩니다.\n맨위로\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: HTTP 요청에서 파이썬 데이터로 가는 문자열 변환\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables\n  *[자동완성]: also known as auto-complete, autocompletion, IntelliSense\n  *[변환]: 다음으로 알려진: 직렬화, 파싱, 마샬링\n  *[의존성 주입]: 컴포넌트, 리소스, 제공자, 서비스, injectables라 알려진",
    "length": 15739,
    "links": [
      "https://fastapi.tiangolo.com/pt/",
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/ko/features/",
      "https://fastapi.tiangolo.com/ko/learn/",
      "https://fastapi.tiangolo.com/ko/reference/",
      "https://fastapi.tiangolo.com/ko/fastapi-people/",
      "https://fastapi.tiangolo.com/ko/resources/",
      "https://fastapi.tiangolo.com/ko/about/",
      "https://fastapi.tiangolo.com/ko/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/ko/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/pt/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_Framework FastAPI, alta performance, fácil de aprender, fácil de codar,\npronto para produção_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Documentação** : <https://fastapi.tiangolo.com>\n**Código fonte** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI é um moderno e rápido (alta performance) _framework web_ para\nconstrução de APIs com Python, baseado nos _type hints_ padrões do Python.\nOs recursos chave são:\n  * **Rápido** : alta performance, equivalente a **NodeJS** e **Go** (graças ao Starlette e Pydantic). Um dos frameworks mais rápidos disponíveis.\n  * **Rápido para codar** : Aumenta a velocidade para desenvolver recursos entre 200% a 300%. *\n  * **Poucos bugs** : Reduz cerca de 40% de erros induzidos por humanos (desenvolvedores). *\n  * **Intuitivo** : Grande suporte a _IDEs_. _Auto-Complete_ em todos os lugares. Menos tempo debugando.\n  * **Fácil** : Projetado para ser fácil de aprender e usar. Menos tempo lendo documentação.\n  * **Enxuto** : Minimize duplicação de código. Múltiplos recursos para cada declaração de parâmetro. Menos bugs.\n  * **Robusto** : Tenha código pronto para produção. E com documentação interativa automática.\n  * **Baseado em padrões** : Baseado em (e totalmente compatível com) os padrões abertos para APIs: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (anteriormente conhecido como Swagger) e [_JSON Schema_](https://json-schema.org/).\n* estimativas baseadas em testes realizados com equipe interna de desenvolvimento, construindo aplicações em produção.\n## Patrocinadores Ouro¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Outros patrocinadores](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## Opiniões¶\n\"_[...] Estou usando**FastAPI** muito esses dias. [...] Estou na verdade\nplanejando utilizar ele em todos os times de **serviços _Machine Learning_ na\nMicrosoft**. Alguns deles estão sendo integrados no _core_ do produto\n**Windows** e alguns produtos **Office**._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_Nós adotamos a biblioteca**FastAPI** para iniciar um servidor **REST** que\npode ser consultado para obter **previsões**. [para o Ludwig]_\"\nPiero Molino, Yaroslav Dudin, e Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_A**Netflix** tem o prazer de anunciar o lançamento open-source do nosso\nframework de orquestração de **gerenciamento de crises** : **Dispatch**!\n[criado com **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_Estou extremamente entusiasmado com o**FastAPI**. É tão divertido!_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcaster**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honestamente, o que você construiu parece super sólido e rebuscado. De\nmuitas formas, eu queria que o**Hug** fosse assim - é realmente inspirador ver\nalguém que construiu ele._\"\nTimothy Crosley - **criador do[Hug](https://github.com/hugapi/hug)**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_Se você está procurando aprender um** _framework_ moderno** para construir\naplicações _REST_ , dê uma olhada no **FastAPI** [...] É rápido, fácil de usar\ne fácil de aprender [...]_\"\n\"_Nós trocamos nossas**APIs** por **FastAPI** [...] Acredito que vocês\ngostarão dele [...]_\"\nInes Montani - Matthew Honnibal - **fundadores da[Explosion\nAI](https://explosion.ai) \\- criadores da [spaCy](https://spacy.io)**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_Se alguém estiver procurando construir uma API Python para produção, eu\nrecomendaria fortemente o**FastAPI**. Ele é **lindamente projetado** ,\n**simples de usar** e **altamente escalável**. Ele se tornou um **componente\nchave** para a nossa estratégia API first de desenvolvimento e está\nimpulsionando diversas automações e serviços, como o nosso Virtual TAC\nEngineer._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , o FastAPI das interfaces de linhas de comando¶\n[](https://typer.tiangolo.com)\nSe você estiver construindo uma aplicação _CLI_ para ser utilizada em um\nterminal ao invés de uma aplicação web, dê uma olhada no\n[**Typer**](https://typer.tiangolo.com/).\n**Typer** é o irmão menor do FastAPI. E seu propósito é ser o **FastAPI das\n_CLIs_**. ⌨️ 🚀\n## Requisitos¶\nFastAPI está nos ombros de gigantes:\n  * [Starlette](https://www.starlette.dev/) para as partes web.\n  * [Pydantic](https://docs.pydantic.dev/) para a parte de dados.\n## Instalação¶\nCrie e ative um [ambiente virtual](https://fastapi.tiangolo.com/pt/virtual-\nenvironments/), e então instale o FastAPI:\n    $ pip install \"fastapi[standard]\"\n    ---> 100%\n**Nota** : Certifique-se de que você colocou `\"fastapi[standard]\"` com aspas,\npara garantir que funcione em todos os terminais.\n## Exemplo¶\n### Crie¶\n  * Crie um arquivo `main.py` com:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nOu use `async def`...\nSe seu código utiliza `async` / `await`, use `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Nota** :\nSe você não sabe, verifique a seção _\"Com pressa?\"_ sobre [`async` e `await`\nnas docs](https://fastapi.tiangolo.com/pt/async/#com-pressa).\n### Rode¶\nRode o servidor com:\n    $ fastapi dev main.py\n     ╭────────── FastAPI CLI - Development mode ───────────╮\n     │                                                     │\n     │  Serving at: http://127.0.0.1:8000                  │\n     │                                                     │\n     │  API docs: http://127.0.0.1:8000/docs               │\n     │                                                     │\n     │  Running in development mode, for production use:   │\n     │                                                     │\n     │  fastapi run                                        │\n     │                                                     │\n     ╰─────────────────────────────────────────────────────╯\n    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [2248755] using WatchFiles\n    INFO:     Started server process [2248757]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nSobre o comando `fastapi dev main.py`...\nO comando `fastapi dev` lê o seu arquivo `main.py`, identifica o aplicativo\n**FastAPI** nele, e inicia um servidor usando o\n[Uvicorn](https://www.uvicorn.dev).\nPor padrão, o `fastapi dev` iniciará com _auto-reload_ habilitado para\ndesenvolvimento local.\nVocê pode ler mais sobre isso na [documentação do FastAPI\nCLI](https://fastapi.tiangolo.com/pt/fastapi-cli/).\n### Verifique¶\nAbra seu navegador em <http://127.0.0.1:8000/items/5?q=somequery>.\nVocê verá a resposta JSON como:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nVocê acabou de criar uma API que:\n  * Recebe requisições HTTP nas _rotas_ `/` e `/items/{item_id}`.\n  * Ambas _rotas_ fazem _operações_ `GET` (também conhecido como _métodos_ HTTP).\n  * A _rota_ `/items/{item_id}` tem um _parâmetro de rota_ `item_id` que deve ser um `int`.\n  * A _rota_ `/items/{item_id}` tem um _parâmetro query_ `q` `str` opcional.\n### Documentação Interativa da API¶\nAgora vá para <http://127.0.0.1:8000/docs>.\nVocê verá a documentação automática interativa da API (fornecida por [Swagger\nUI](https://github.com/swagger-api/swagger-ui)):\n### Documentação Alternativa da API¶\nE agora, vá para <http://127.0.0.1:8000/redoc>.\nVocê verá a documentação automática alternativa (fornecida por\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Evoluindo o Exemplo¶\nAgora modifique o arquivo `main.py` para receber um corpo para uma requisição\n`PUT`.\nDeclare o corpo utilizando tipos padrão Python, graças ao Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nO servidor `fastapi dev` deverá recarregar automaticamente.\n### Evoluindo a Documentação Interativa da API¶\nAgora vá para <http://127.0.0.1:8000/docs>.\n  * A documentação interativa da API será automaticamente atualizada, incluindo o novo corpo:\n  * Clique no botão \"Try it out\", ele permitirá que você preencha os parâmetros e interaja diretamente com a API:\n  * Então clique no botão \"Execute\", a interface do usuário irá se comunicar com a API, enviar os parâmetros, pegar os resultados e mostrá-los na tela:\n### Evoluindo a Documentação Alternativa da API¶\nE agora, vá para <http://127.0.0.1:8000/redoc>.\n  * A documentação alternativa também irá refletir o novo parâmetro da _query_ e o corpo:\n### Recapitulando¶\nResumindo, você declara **uma vez** os tipos dos parâmetros, corpo etc. como\nparâmetros de função.\nVocê faz isso com os tipos padrão do Python moderno.\nVocê não terá que aprender uma nova sintaxe, métodos ou classes de uma\nbiblioteca específica etc.\nApenas **Python** padrão.\nPor exemplo, para um `int`:\n    item_id: int\nou para um modelo mais complexo, `Item`:\n    item: Item\n...e com essa única declaração você tem:\n  * Suporte ao Editor, incluindo:\n    * Completação.\n    * Verificação de tipos.\n  * Validação de dados:\n    * Erros automáticos e claros quando o dado é inválido.\n    * Validação até para objetos JSON profundamente aninhados.\n  * Conversão de dados de entrada: vindo da rede para dados e tipos Python. Consegue ler:\n    * JSON.\n    * Parâmetros de rota.\n    * Parâmetros de _query_ .\n    * _Cookies_.\n    * Cabeçalhos.\n    * Formulários.\n    * Arquivos.\n  * Conversão de dados de saída de tipos e dados Python para dados de rede (como JSON):\n    * Converte tipos Python (`str`, `int`, `float`, `bool`, `list` etc).\n    * Objetos `datetime`.\n    * Objetos `UUID`.\n    * Modelos de Banco de Dados.\n    * ...e muito mais.\n  * Documentação interativa automática da API, incluindo 2 alternativas de interface de usuário:\n    * Swagger UI.\n    * ReDoc.\n* * *\nVoltando ao código do exemplo anterior, **FastAPI** irá:\n  * Validar que existe um `item_id` na rota para requisições `GET` e `PUT`.\n  * Validar que `item_id` é do tipo `int` para requisições `GET` e `PUT`.\n    * Se não é validado, o cliente verá um útil, claro erro.\n  * Verificar se existe um parâmetro de _query_ opcional nomeado como `q` (como em `http://127.0.0.1:8000/items/foo?q=somequery`) para requisições `GET`.\n    * Como o parâmetro `q` é declarado com `= None`, ele é opcional.\n    * Sem o `None` ele poderia ser obrigatório (como o corpo no caso de `PUT`).\n  * Para requisições `PUT` para `/items/{item_id}`, lerá o corpo como JSON e:\n    * Verifica que tem um atributo obrigatório `name` que deve ser `str`.\n    * Verifica que tem um atributo obrigatório `price` que deve ser `float`.\n    * Verifica que tem an atributo opcional `is_offer`, que deve ser `bool`, se presente.\n    * Tudo isso também funciona para objetos JSON profundamente aninhados.\n  * Converter de e para JSON automaticamente.\n  * Documentar tudo com OpenAPI, que poderá ser usado por:\n    * Sistemas de documentação interativos.\n    * Sistemas de clientes de geração de código automáticos, para muitas linguagens.\n  * Fornecer diretamente 2 interfaces _web_ de documentação interativa.\n* * *\nNós apenas arranhamos a superfície, mas você já tem idéia de como tudo\nfunciona.\nExperimente mudar a seguinte linha:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...de:\n            ... \"item_name\": item.name ...\n...para:\n            ... \"item_price\": item.price ...\n...e veja como seu editor irá auto-completar os atributos e saberá os tipos:\nPara um exemplo mais completo incluindo mais recursos, veja [Tutorial - Guia\ndo Usuário](https://fastapi.tiangolo.com/pt/tutorial/).\n**Alerta de Spoiler** : o tutorial - guia do usuário inclui:\n  * Declaração de **parâmetetros** de diferentes lugares como: **cabeçalhos** , **cookies** , **campos de formulários** e **arquivos**.\n  * Como configurar **Limitações de Validação** como `maximum_length` ou `regex`.\n  * Um poderoso e fácil de usar sistema de **Injeção de Dependência**.\n  * Segurança e autenticação, incluindo suporte para **OAuth2** com autenticação **JWT tokens** e **HTTP Basic**.\n  * Técnicas mais avançadas (mas igualmente fáceis) para declaração de **modelos JSON profundamente aninhados** (graças ao Pydantic).\n  * Integrações **GraphQL** com o [Strawberry](https://strawberry.rocks) e outras bibliotecas.\n  * Muitos recursos extras (graças ao Starlette) como:\n    * **WebSockets**\n    * testes extrememamente fáceis baseados em HTTPX e `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ...e mais.\n## Performance¶\nTestes de performance da _Independent TechEmpower_ mostram aplicações\n**FastAPI** rodando sob Uvicorn como [um dos _frameworks_ Python mais rápidos\ndisponíveis](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nsomente atrás de Starlette e Uvicorn (utilizados internamente pelo FastAPI).\n(*)\nPara entender mais sobre performance, veja a seção\n[Comparações](https://fastapi.tiangolo.com/pt/benchmarks/).\n## Dependências¶\nO FastAPI depende do Pydantic e do Starlette.\n### Dependências `standard`¶\nQuando você instala o FastAPI com `pip install \"fastapi[standard]\"`, ele vêm\ncom o grupo `standard` (padrão) de dependências opcionais:\nUtilizado pelo Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- para validação de email.\nUtilizado pelo Starlette:\n  * [`httpx`](https://www.python-httpx.org) \\- Obrigatório caso você queira utilizar o `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Obrigatório se você quer utilizar a configuração padrão de templates.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Obrigatório se você deseja suporte a \"parsing\" de formulário, com `request.form()`.\nUtilizado pelo FastAPI / Starlette:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- para o servidor que carrega e serve a sua aplicação. Isto inclui `uvicorn[standard]`, que inclui algumas dependências (e.g. `uvloop`) necessárias para servir em alta performance.\n  * `fastapi-cli` \\- que disponibiliza o comando `fastapi`.\n### Sem as dependências `standard`¶\nSe você não deseja incluir as dependências opcionais `standard`, você pode\ninstalar utilizando `pip install fastapi` ao invés de `pip install\n\"fastapi[standard]\"`.\n### Dpendências opcionais adicionais¶\nExistem algumas dependências adicionais que você pode querer instalar.\nDependências opcionais adicionais do Pydantic:\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \\- para gerenciamento de configurações.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \\- tipos extras para serem utilizados com o Pydantic.\nDependências opcionais adicionais do FastAPI:\n  * [`orjson`](https://github.com/ijl/orjson) \\- Obrigatório se você deseja utilizar o `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- Obrigatório se você deseja utilizar o `UJSONResponse`.\n## Licença¶\nEsse projeto é licenciado sob os termos da licença MIT.\nVoltar ao topo\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables\n  *[자동완성]: also known as auto-complete, autocompletion, IntelliSense\n  *[변환]: 다음으로 알려진: 직렬화, 파싱, 마샬링\n  *[의존성 주입]: 컴포넌트, 리소스, 제공자, 서비스, injectables라 알려진\n  *[_Auto-Complete_]: também conhecido como _auto-complete_, _autocompletion_, _IntelliSense_\n  *[_CLI_]: Command Line Interface\n  *[Conversão]: também conhecido como: serialization, parsing, marshalling\n  *[Injeção de Dependência]: também conhecido como componentes, recursos, fornecedores, serviços, injetáveis",
    "length": 22385,
    "links": [
      "https://fastapi.tiangolo.com/ru/",
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/pt/features/",
      "https://fastapi.tiangolo.com/pt/learn/",
      "https://fastapi.tiangolo.com/pt/reference/",
      "https://fastapi.tiangolo.com/pt/fastapi-people/",
      "https://fastapi.tiangolo.com/pt/resources/",
      "https://fastapi.tiangolo.com/pt/about/",
      "https://fastapi.tiangolo.com/pt/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/pt/virtual-environments/",
      "https://fastapi.tiangolo.com/pt/async/",
      "https://fastapi.tiangolo.com/pt/fastapi-cli/",
      "https://fastapi.tiangolo.com/pt/tutorial/",
      "https://fastapi.tiangolo.com/pt/benchmarks/",
      "https://fastapi.tiangolo.com/pt/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/ru/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_Фреймворк FastAPI: высокая производительность, прост в изучении, быстрый в\nразработке, готов к продакшн_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Документация** :\n[https://fastapi.tiangolo.com](https://fastapi.tiangolo.com/ru)\n**Исходный код** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI — это современный, быстрый (высокопроизводительный) веб-фреймворк для\nсоздания API на Python, основанный на стандартных аннотациях типов Python.\nКлючевые особенности:\n  * **Скорость** : Очень высокая производительность, на уровне **NodeJS** и **Go** (благодаря Starlette и Pydantic). Один из самых быстрых доступных фреймворков Python.\n  * **Быстрота разработки** : Увеличьте скорость разработки фич примерно на 200–300%. *\n  * **Меньше ошибок** : Сократите примерно на 40% количество ошибок, вызванных человеком (разработчиком). *\n  * **Интуитивность** : Отличная поддержка редактора кода. Автозавершение везде. Меньше времени на отладку.\n  * **Простота** : Разработан так, чтобы его было легко использовать и осваивать. Меньше времени на чтение документации.\n  * **Краткость** : Минимизируйте дублирование кода. Несколько возможностей из каждого объявления параметров. Меньше ошибок.\n  * **Надежность** : Получите код, готовый к продакшн. С автоматической интерактивной документацией.\n  * **На основе стандартов** : Основан на открытых стандартах API и полностью совместим с ними: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (ранее известный как Swagger) и [JSON Schema](https://json-schema.org/).\n* оценка на основе тестов внутренней команды разработчиков, создающих продакшн-приложения.\n## Спонсоры¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Другие спонсоры](https://fastapi.tiangolo.com/ru/fastapi-people/#sponsors)\n## Мнения¶\n\"_[...] В последнее время я много где использую**FastAPI**. [...] На самом\nделе я планирую использовать его для всех **ML-сервисов моей команды в\nMicrosoft**. Некоторые из них интегрируются в основной продукт **Windows** , а\nнекоторые — в продукты **Office**._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_Мы начали использовать библиотеку**FastAPI** , чтобы поднять **REST**\n-сервер, к которому можно обращаться за **предсказаниями**. [для Ludwig]_\"\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** рада объявить об открытом релизе нашего фреймворка оркестрации\n**антикризисного управления** : **Dispatch**! [создан с помощью **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_Я в полном восторге от**FastAPI**. Это так весело!_\"\nBrian Okken - **Ведущий подкаста[Python\nBytes](https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-\nwrongs?time_in_sec=855)**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Честно говоря, то, что вы создали, выглядит очень солидно и отполировано. Во\nмногих смыслах это то, чем я хотел видеть**Hug** — очень вдохновляет видеть,\nкак кто-то это создал._\"\nTimothy Crosley - **Создатель[Hug](https://github.com/hugapi/hug)**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_Если вы хотите изучить один**современный фреймворк** для создания REST API,\nпосмотрите **FastAPI** [...] Он быстрый, простой в использовании и лёгкий в\nизучении [...]_\"\n\"_Мы переключились на**FastAPI** для наших **API** [...] Думаю, вам тоже\nпонравится [...]_\"\nInes Montani - Matthew Honnibal - **Основатели[Explosion\nAI](https://explosion.ai) — создатели [spaCy](https://spacy.io)**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_Если кто-то собирается делать продакшн-API на Python, я настоятельно\nрекомендую**FastAPI**. Он **прекрасно спроектирован** , **прост в\nиспользовании** и **отлично масштабируется** , стал **ключевым компонентом**\nнашей стратегии API-first и приводит в действие множество автоматизаций и\nсервисов, таких как наш Virtual TAC Engineer._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## **Typer** , FastAPI для CLI¶\n[](https://typer.tiangolo.com)\nЕсли вы создаёте приложение CLI для использования в терминале вместо веб-API,\nпосмотрите [**Typer**](https://typer.tiangolo.com/).\n**Typer** — младший брат FastAPI. И он задуман как **FastAPI для CLI**. ⌨️ 🚀\n## Зависимости¶\nFastAPI стоит на плечах гигантов:\n  * [Starlette](https://www.starlette.dev/) для части, связанной с вебом.\n  * [Pydantic](https://docs.pydantic.dev/) для части, связанной с данными.\n## Установка¶\nСоздайте и активируйте [виртуальное\nокружение](https://fastapi.tiangolo.com/ru/virtual-environments/), затем\nустановите FastAPI:\n    $ pip install \"fastapi[standard]\"\n    ---> 100%\n**Примечание** : Обязательно заключите `\"fastapi[standard]\"` в кавычки, чтобы\nэто работало во всех терминалах.\n## Пример¶\n### Создание¶\nСоздайте файл `main.py` со следующим содержимым:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nИли используйте `async def`...\nЕсли ваш код использует `async` / `await`, используйте `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Примечание** :\nЕсли не уверены, посмотрите раздел _«Нет времени?»_ о [`async` и `await` в\nдокументации](https://fastapi.tiangolo.com/ru/async/#in-a-hurry).\n### Запуск¶\nЗапустите сервер командой:\n    $ fastapi dev main.py\n     ╭────────── FastAPI CLI - Development mode ───────────╮\n     │                                                     │\n     │  Serving at: http://127.0.0.1:8000                  │\n     │                                                     │\n     │  API docs: http://127.0.0.1:8000/docs               │\n     │                                                     │\n     │  Running in development mode, for production use:   │\n     │                                                     │\n     │  fastapi run                                        │\n     │                                                     │\n     ╰─────────────────────────────────────────────────────╯\n    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [2248755] using WatchFiles\n    INFO:     Started server process [2248757]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nО команде `fastapi dev main.py`...\nКоманда `fastapi dev` читает ваш файл `main.py`, находит в нём приложение\n**FastAPI** и запускает сервер с помощью [Uvicorn](https://www.uvicorn.dev).\nПо умолчанию `fastapi dev` запускается с включённой авто-перезагрузкой для\nлокальной разработки.\nПодробнее в [документации по FastAPI\nCLI](https://fastapi.tiangolo.com/ru/fastapi-cli/).\n### Проверка¶\nОткройте браузер на <http://127.0.0.1:8000/items/5?q=somequery>.\nВы увидите JSON-ответ:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nВы уже создали API, который:\n  * Получает HTTP-запросы по _путям_ `/` и `/items/{item_id}`.\n  * Оба _пути_ используют `GET` _операции_ (также известные как HTTP _методы_).\n  * _Путь_ `/items/{item_id}` имеет _параметр пути_ `item_id`, который должен быть `int`.\n  * _Путь_ `/items/{item_id}` имеет необязательный `str` _параметр запроса_ `q`.\n### Интерактивная документация API¶\nПерейдите на <http://127.0.0.1:8000/docs>.\nВы увидите автоматическую интерактивную документацию API (предоставлена\n[Swagger UI](https://github.com/swagger-api/swagger-ui)):\n### Альтернативная документация API¶\nТеперь откройте <http://127.0.0.1:8000/redoc>.\nВы увидите альтернативную автоматическую документацию (предоставлена\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Пример обновления¶\nТеперь измените файл `main.py`, чтобы принимать тело запроса из `PUT` запроса.\nОбъявите тело, используя стандартные типы Python, спасибо Pydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nСервер `fastapi dev` должен перезагрузиться автоматически.\n### Обновление интерактивной документации API¶\nПерейдите на <http://127.0.0.1:8000/docs>.\n  * Интерактивная документация API будет автоматически обновлена, включая новое тело:\n  * Нажмите кнопку «Try it out», это позволит вам заполнить параметры и напрямую взаимодействовать с API:\n  * Затем нажмите кнопку «Execute», интерфейс свяжется с вашим API, отправит параметры, получит результаты и отобразит их на экране:\n### Обновление альтернативной документации API¶\nТеперь откройте <http://127.0.0.1:8000/redoc>.\n  * Альтернативная документация также отразит новый параметр запроса и тело:\n### Подведём итоги¶\nИтак, вы объявляете **один раз** типы параметров, тела запроса и т.д. как\nпараметры функции.\nВы делаете это с помощью стандартных современных типов Python.\nВам не нужно изучать новый синтаксис, методы или классы конкретной библиотеки\nи т.п.\nТолько стандартный **Python**.\nНапример, для `int`:\n    item_id: int\nили для более сложной модели `Item`:\n    item: Item\n...и с этим единственным объявлением вы получаете:\n  * Поддержку редактора кода, включая:\n    * Автозавершение.\n    * Проверку типов.\n  * Валидацию данных:\n    * Автоматические и понятные ошибки, когда данные некорректны.\n    * Валидацию даже для глубоко вложенных объектов JSON.\n  * Преобразование входных данных: из сети в данные и типы Python. Чтение из:\n    * JSON.\n    * Параметров пути.\n    * Параметров запроса.\n    * Cookies.\n    * HTTP-заголовков.\n    * Форм.\n    * Файлов.\n  * Преобразование выходных данных: из данных и типов Python в данные сети (например, JSON):\n    * Преобразование типов Python (`str`, `int`, `float`, `bool`, `list` и т.д.).\n    * Объекты `datetime`.\n    * Объекты `UUID`.\n    * Модели баз данных.\n    * ...и многое другое.\n  * Автоматическую интерактивную документацию API, включая 2 альтернативных интерфейса:\n    * Swagger UI.\n    * ReDoc.\n* * *\nВозвращаясь к предыдущему примеру кода, **FastAPI** будет:\n  * Валидировать наличие `item_id` в пути для `GET` и `PUT` запросов.\n  * Валидировать, что `item_id` имеет тип `int` для `GET` и `PUT` запросов.\n    * Если это не так, клиент увидит полезную понятную ошибку.\n  * Проверять, есть ли необязательный параметр запроса с именем `q` (например, `http://127.0.0.1:8000/items/foo?q=somequery`) для `GET` запросов.\n    * Поскольку параметр `q` объявлен с `= None`, он необязателен.\n    * Без `None` он был бы обязательным (как тело запроса в случае с `PUT`).\n  * Для `PUT` запросов к `/items/{item_id}` читать тело запроса как JSON:\n    * Проверять, что есть обязательный атрибут `name`, который должен быть `str`.\n    * Проверять, что есть обязательный атрибут `price`, который должен быть `float`.\n    * Проверять, что есть необязательный атрибут `is_offer`, который должен быть `bool`, если он присутствует.\n    * Всё это также будет работать для глубоко вложенных объектов JSON.\n  * Автоматически преобразовывать из и в JSON.\n  * Документировать всё с помощью OpenAPI, что может быть использовано:\n    * Системами интерактивной документации.\n    * Системами автоматической генерации клиентского кода для многих языков.\n  * Предоставлять 2 веб-интерфейса интерактивной документации напрямую.\n* * *\nМы только поверхностно ознакомились, но вы уже понимаете, как всё это\nработает.\nПопробуйте изменить строку:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...из:\n            ... \"item_name\": item.name ...\n...на:\n            ... \"item_price\": item.price ...\n...и посмотрите, как ваш редактор кода будет автоматически дополнять атрибуты\nи знать их типы:\nБолее полный пример с дополнительными возможностями см. в [Учебник -\nРуководство пользователя](https://fastapi.tiangolo.com/ru/tutorial/).\n**Осторожно, спойлер** : учебник - руководство включает:\n  * Объявление **параметров** из других источников: **HTTP-заголовки** , **cookies** , **поля формы** и **файлы**.\n  * Как задать **ограничения валидации** вроде `maximum_length` или `regex`.\n  * Очень мощную и простую в использовании систему **внедрения зависимостей**.\n  * Безопасность и аутентификацию, включая поддержку **OAuth2** с **JWT токенами** и **HTTP Basic** аутентификацию.\n  * Более продвинутые (но столь же простые) приёмы объявления **глубоко вложенных JSON-моделей** (спасибо Pydantic).\n  * Интеграцию **GraphQL** с [Strawberry](https://strawberry.rocks) и другими библиотеками.\n  * Множество дополнительных функций (благодаря Starlette), таких как:\n    * **WebSockets**\n    * чрезвычайно простые тесты на основе HTTPX и `pytest`\n    * **CORS**\n    * **сессии с использованием cookie**\n    * ...и многое другое.\n## Производительность¶\nНезависимые бенчмарки TechEmpower показывают приложения **FastAPI** ,\nработающие под управлением Uvicorn, как [один из самых быстрых доступных\nфреймворков\nPython](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nуступающий только самим Starlette и Uvicorn (используются внутри FastAPI). (*)\nЧтобы узнать больше, см. раздел\n[Бенчмарки](https://fastapi.tiangolo.com/ru/benchmarks/).\n## Зависимости¶\nFastAPI зависит от Pydantic и Starlette.\n### Зависимости `standard`¶\nКогда вы устанавливаете FastAPI с помощью `pip install \"fastapi[standard]\"`,\nон идёт с группой опциональных зависимостей `standard`:\nИспользуется Pydantic:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) — для проверки адресов электронной почты.\nИспользуется Starlette:\n  * [`httpx`](https://www.python-httpx.org) — обязателен, если вы хотите использовать `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) — обязателен, если вы хотите использовать конфигурацию шаблонов по умолчанию.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) — обязателен, если вы хотите поддерживать «парсинг» форм через `request.form()`.\nИспользуется FastAPI:\n  * [`uvicorn`](https://www.uvicorn.dev) — сервер, который загружает и обслуживает ваше приложение. Включает `uvicorn[standard]`, содержащий некоторые зависимости (например, `uvloop`), нужные для высокой производительности.\n  * `fastapi-cli[standard]` — чтобы предоставить команду `fastapi`.\n    * Включает `fastapi-cloud-cli`, который позволяет развернуть ваше приложение FastAPI в [FastAPI Cloud](https://fastapicloud.com).\n### Без зависимостей `standard`¶\nЕсли вы не хотите включать опциональные зависимости `standard`, можно\nустановить `pip install fastapi` вместо `pip install \"fastapi[standard]\"`.\n### Без `fastapi-cloud-cli`¶\nЕсли вы хотите установить FastAPI со стандартными зависимостями, но без\n`fastapi-cloud-cli`, установите `pip install \"fastapi[standard-no-fastapi-\ncloud-cli]\"`.\n### Дополнительные опциональные зависимости¶\nЕсть дополнительные зависимости, которые вы можете установить.\nДополнительные опциональные зависимости Pydantic:\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) — для управления настройками.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) — дополнительные типы для использования с Pydantic.\nДополнительные опциональные зависимости FastAPI:\n  * [`orjson`](https://github.com/ijl/orjson) — обязателен, если вы хотите использовать `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) — обязателен, если вы хотите использовать `UJSONResponse`.\n## Лицензия¶\nЭтот проект распространяется на условиях лицензии MIT.\nК началу\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface – Интерфейс командной строки\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables\n  *[자동완성]: also known as auto-complete, autocompletion, IntelliSense\n  *[변환]: 다음으로 알려진: 직렬화, 파싱, 마샬링\n  *[의존성 주입]: 컴포넌트, 리소스, 제공자, 서비스, injectables라 알려진\n  *[_Auto-Complete_]: também conhecido como _auto-complete_, _autocompletion_, _IntelliSense_\n  *[_CLI_]: Command Line Interface\n  *[Conversão]: também conhecido como: serialization, parsing, marshalling\n  *[Injeção de Dependência]: também conhecido como componentes, recursos, fornecedores, serviços, injetáveis\n  *[Автозавершение]: также известное как: автодополнение, IntelliSense\n  *[Преобразование]: также известное как: сериализация, парсинг, маршалинг\n  *[внедрения зависимостей]: также известная как: компоненты, ресурсы, провайдеры, сервисы, инъекции\n  *[«парсинг»]: преобразование строки, полученной из HTTP-запроса, в данные Python",
    "length": 22875,
    "links": [
      "https://fastapi.tiangolo.com/tr/",
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/ru/features/",
      "https://fastapi.tiangolo.com/ru/learn/",
      "https://fastapi.tiangolo.com/ru/reference/",
      "https://fastapi.tiangolo.com/ru/fastapi-people/",
      "https://fastapi.tiangolo.com/ru/resources/",
      "https://fastapi.tiangolo.com/ru/about/",
      "https://fastapi.tiangolo.com/ru/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/ru",
      "https://fastapi.tiangolo.com/ru/fastapi-people/",
      "https://fastapi.tiangolo.com/ru/virtual-environments/",
      "https://fastapi.tiangolo.com/ru/async/",
      "https://fastapi.tiangolo.com/ru/fastapi-cli/",
      "https://fastapi.tiangolo.com/ru/tutorial/",
      "https://fastapi.tiangolo.com/ru/benchmarks/",
      "https://fastapi.tiangolo.com/ru/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/tr/",
    "title": "FastAPI¶",
    "content": "# FastAPI¶\n[](https://fastapi.tiangolo.com)\n_FastAPI framework, yüksek performanslı, öğrenmesi oldukça kolay, kodlaması\nhızlı, kullanıma hazır_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Dokümantasyon** : <https://fastapi.tiangolo.com>\n**Kaynak Kod** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI, Python 'nin standart tip belirteçlerine dayalı, modern ve hızlı\n(yüksek performanslı) API'lar oluşturmak için kullanılabilecek web\nframework'tür.\nTemel özellikleri şunlardır:\n  * **Hızlı** : Çok yüksek performanslı, **NodeJS** ve **Go** ile eşit düzeyde (Starlette ve Pydantic sayesinde). En hızlı Python framework'lerinden bir tanesidir.\n  * **Kodlaması Hızlı** : Geliştirme hızını yaklaşık %200 ile %300 aralığında arttırır. *\n  * **Daha az hata** : İnsan (geliştirici) kaynaklı hataları yaklaşık %40 azaltır. *\n  * **Sezgisel** : Muhteşem bir editör desteği. Her yerde otomatik tamamlama. Hata ayıklama ile daha az zaman harcayacaksınız.\n  * **Kolay** : Öğrenmesi ve kullanması kolay olacak şekilde tasarlandı. Doküman okuma ile daha az zaman harcayacaksınız.\n  * **Kısa** : Kod tekrarı minimize edildi. Her parametre tanımlamasında birden fazla özellik ve daha az hatayla karşılaşacaksınız.\n  * **Güçlü** : Otomatik ve etkileşimli dokümantasyon ile birlikte, kullanıma hazır kod elde edebilirsiniz.\n  * **Standard öncelikli** : API'lar için açık standartlara dayalı (ve tamamen uyumlu); [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (eski adıyla Swagger) ve [JSON Schema](https://json-schema.org/).\n* ilgili kanılar, dahili geliştirme ekibinin geliştirdikleri ürünlere yaptıkları testlere dayanmaktadır.\n## Sponsorlar¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Diğer Sponsorlar](https://fastapi.tiangolo.com/tr/fastapi-people/#sponsors)\n## Görüşler¶\n\"_[...] Bugünlerde**FastAPI** 'ı çok fazla kullanıyorum. [...] Aslında bunu\nekibimin **Microsoft'taki Machine Learning servislerinin** tamamında\nkullanmayı planlıyorum. Bunlardan bazıları **Windows** 'un ana ürünlerine ve\n**Office** ürünlerine entegre ediliyor._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_**FastAPI** 'ı **tahminlerimiz** 'i sorgulanabilir hale getirecek bir\n**REST** sunucu oluşturmak için benimsedik/kullanmaya başladık._\"\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** , **kriz yönetiminde** orkestrasyon yapabilmek için geliştirdiği\nyeni framework'ü **Dispatch** 'in, açık kaynak sürümünü paylaşmaktan gurur\nduyuyor. [**FastAPI** ile yapıldı.]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_**FastAPI** için ayın üzerindeymişcesine heyecanlıyım. Çok eğlenceli!_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcast host**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Dürüst olmak gerekirse, inşa ettiğiniz şey gerçekten sağlam ve profesyonel\ngörünüyor. Birçok açıdan**Hug** 'ın olmasını istediğim şey tam da bu - böyle\nbir şeyi inşa eden birini görmek gerçekten ilham verici._\"\nTimothy Crosley - **[Hug](http://www.hug.rest/)'ın Yaratıcısı**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_Eğer REST API geliştirmek için**modern bir framework** öğrenme arayışında\nisen, **FastAPI** 'a bir göz at [...] Hızlı, kullanımı ve öğrenmesi kolay.\n[...]_\"\n\"_**API** servislerimizi **FastAPI** 'a taşıdık [...] Sizin de beğeneceğinizi\ndüşünüyoruz. [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai)\nkurucuları - [spaCy](https://spacy.io) yaratıcıları**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n\"_Python ile kullanıma hazır bir API oluşturmak isteyen herhangi biri\niçin,**FastAPI** 'ı şiddetle tavsiye ederim. **Harika tasarlanmış** ,\n**kullanımı kolay** ve **yüksek ölçeklenebilir** , API odaklı geliştirme\nstratejimizin **ana bileşeni** haline geldi ve Virtual TAC Engineer gibi\nbirçok otomasyon ve servisi yönetiyor._\"\nDeon Pillsbury - **Cisco**\n[(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-\nactivity-6963242628536487936-trAp/)\n* * *\n## Komut Satırı Uygulamalarının FastAPI'ı: **Typer**¶\n[](https://typer.tiangolo.com)\nEğer API yerine, terminalde kullanılmak üzere bir komut satırı uygulaması\ngeliştiriyorsanız [**Typer**](https://typer.tiangolo.com/)'a göz\natabilirsiniz.\n**Typer** kısaca FastAPI'ın küçük kardeşi. Ve hedefi komut satırı\nuygulamalarının **FastAPI'ı** olmak. ⌨️ 🚀\n## Gereksinimler¶\nFastAPI iki devin omuzları üstünde duruyor:\n  * Web tarafı için [Starlette](https://www.starlette.dev/).\n  * Data tarafı için [Pydantic](https://docs.pydantic.dev/).\n## Kurulum¶\n    $ pip install fastapi\n    ---> 100%\nUygulamamızı kullanılabilir hale getirmek için\n[Uvicorn](http://www.uvicorn.dev) ya da\n[Hypercorn](https://github.com/pgjones/hypercorn) gibi bir ASGI sunucusuna\nihtiyacımız olacak.\n    $ pip install \"uvicorn[standard]\"\n    ---> 100%\n## Örnek¶\n### Kodu Oluşturalım¶\n  * `main.py` adında bir dosya oluşturup içine şu kodu yapıştıralım:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nYa da `async def`...\nEğer kodunuzda `async` / `await` varsa, `async def` kullanalım:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Not** :\nEğer bu konu hakkında bilginiz yoksa [`async` ve\n`await`](https://fastapi.tiangolo.com/tr/async/#in-a-hurry)\ndokümantasyonundaki _\"Aceleniz mi var?\"_ kısmını kontrol edebilirsiniz.\n### Kodu Çalıştıralım¶\nSunucuyu aşağıdaki komutla çalıştıralım:\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\n`uvicorn main:app --reload` komutuyla ilgili...\n`uvicorn main:app` komutunu şu şekilde açıklayabiliriz:\n  * `main`: dosya olan `main.py` (yani Python \"modülü\").\n  * `app`: ise `main.py` dosyasının içerisinde `app = FastAPI()` satırında oluşturduğumuz `FastAPI` nesnesi.\n  * `--reload`: kod değişikliklerinin ardından sunucuyu otomatik olarak yeniden başlatır. Bu parameteyi sadece geliştirme aşamasında kullanmalıyız.\n### Şimdi de Kontrol Edelim¶\nTarayıcımızda şu bağlantıyı açalım\n<http://127.0.0.1:8000/items/5?q=somequery>.\nAşağıdaki gibi bir JSON yanıtıyla karşılaşacağız:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nAz önce oluşturduğumuz API:\n  * `/` ve `/items/{item_id}` _yollarına_ HTTP isteği alabilir.\n  * İki _yolda_ `GET` _operasyonlarını_ (HTTP _metodları_ olarak da bilinen) kabul ediyor.\n  * `/items/{item_id}` _yolu_ `item_id` adında bir _yol parametresine_ sahip ve bu parametre `int` değer almak zorundadır.\n  * `/items/{item_id}` _yolu_ `q` adında bir _yol parametresine_ sahip ve bu parametre opsiyonel olmakla birlikte, `str` değer almak zorundadır.\n### Etkileşimli API Dokümantasyonu¶\nŞimdi <http://127.0.0.1:8000/docs> bağlantısını açalım.\n[Swagger UI](https://github.com/swagger-api/swagger-ui) tarafından sağlanan\notomatik etkileşimli bir API dokümantasyonu göreceğiz:\n### Alternatif API Dokümantasyonu¶\nŞimdi <http://127.0.0.1:8000/redoc> bağlantısını açalım.\n[ReDoc](https://github.com/Rebilly/ReDoc) tarafından sağlanan otomatik\ndokümantasyonu göreceğiz:\n## Örneği Güncelleyelim¶\nŞimdi `main.py` dosyasını, `PUT` isteğiyle birlikte bir gövde alacak şekilde\ndeğiştirelim.\nGövdeyi Pydantic sayesinde standart python tiplerini kullanarak tanımlayalım.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nSunucu otomatik olarak yeniden başlamış olmalı (çünkü yukarıda `uvicorn`\nkomutuyla birlikte `--reload` parametresini kullandık).\n### Etkileşimli API Dokümantasyonundaki Değişimi Görelim¶\nŞimdi <http://127.0.0.1:8000/docs> bağlantısına tekrar gidelim.\n  * Etkileşimli API dokümantasyonu, yeni gövdede dahil olmak üzere otomatik olarak güncellenmiş olacak:\n  * \"Try it out\" butonuna tıklayalım, bu işlem API parametleri üzerinde değişiklik yapmamıza ve doğrudan API ile etkileşime geçmemize imkan sağlayacak:\n  * Şimdi \"Execute\" butonuna tıklayalım, kullanıcı arayüzü API'ımız ile bağlantı kurup parametreleri gönderecek ve sonucu ekranımıza getirecek:\n### Alternatif API Dokümantasyonundaki Değişimi Görelim¶\nŞimdi ise <http://127.0.0.1:8000/redoc> bağlantısına tekrar gidelim.\n  * Alternatif dokümantasyonda yaptığımız değişiklikler ile birlikte yeni sorgu parametresi ve gövde bilgisi ile güncelemiş olacak:\n### Özet¶\nÖzetlemek gerekirse, parametrelerin, gövdenin, vb. veri tiplerini fonksiyon\nparametreleri olarak **bir kere** tanımlıyoruz.\nBu işlemi standart modern Python tipleriyle yapıyoruz.\nYeni bir sözdizimi yapısını, bir kütüphane özel metod veya sınıfları öğrenmeye\ngerek yoktur.\nHepsi sadece **Python** standartlarına dayalıdır.\nÖrnek olarak, `int` tanımlamak için:\n    item_id: int\nya da daha kompleks herhangi bir python modelini tanımlayabiliriz, örneğin\n`Item` modeli için:\n    item: Item\n...ve sadece kısa bir parametre tipi belirterek elde ettiklerimiz:\n  * Editör desteğiyle birlikte:\n    * Otomatik tamamlama.\n    * Tip kontrolü.\n  * Veri Doğrulama:\n    * Veri geçerli değilse, otomatik olarak açıklayıcı hatalar gösterir.\n    * Çok derin JSON nesnelerinde bile doğrulama yapar.\n  * Gelen verinin dönüşümünü aşağıdaki veri tiplerini kullanarak gerçekleştirir:\n    * JSON.\n    * Yol parametreleri.\n    * Sorgu parametreleri.\n    * Çerezler.\n    * Headers.\n    * Formlar.\n    * Dosyalar.\n  * Giden verinin dönüşümünü aşağıdaki veri tiplerini kullanarak gerçekleştirir (JSON olarak):\n    * Python tiplerinin (`str`, `int`, `float`, `bool`, `list`, vb) dönüşümü.\n    * `datetime` nesnesi.\n    * `UUID` nesnesi.\n    * Veritabanı modelleri.\n    * ve çok daha fazlası...\n  * 2 alternatif kullanıcı arayüzü dahil olmak üzere, otomatik etkileşimli API dokümantasyonu sağlar:\n    * Swagger UI.\n    * ReDoc.\n* * *\nAz önceki örneğe geri dönelim, **FastAPI** 'ın yapacaklarına bir bakış atalım:\n  * `item_id`'nin `GET` ve `PUT` istekleri için, yolda olup olmadığının kontol edecek.\n  * `item_id`'nin `GET` ve `PUT` istekleri için, tipinin `int` olduğunu doğrulayacak.\n    * Eğer değilse, sebebini belirten bir hata mesajı gösterecek.\n  * Opsiyonel bir `q` parametresinin `GET` isteği içinde (`http://127.0.0.1:8000/items/foo?q=somequery` gibi) olup olmadığını kontrol edecek\n    * `q` parametresini `= None` ile oluşturduğumuz için, opsiyonel bir parametre olacak.\n    * Eğer `None` olmasa zorunlu bir parametre olacaktı (`PUT` metodunun gövdesinde olduğu gibi).\n  * `PUT` isteği için `/items/{item_id}`'nin gövdesini, JSON olarak doğrulayıp okuyacak:\n    * `name` adında zorunlu bir parametre olup olmadığını ve varsa tipinin `str` olup olmadığını kontol edecek.\n    * `price` adında zorunlu bir parametre olup olmadığını ve varsa tipinin `float` olup olmadığını kontol edecek.\n    * `is_offer` adında opsiyonel bir parametre olup olmadığını ve varsa tipinin `float` olup olmadığını kontol edecek.\n    * Bunların hepsi en derin JSON nesnelerinde bile çalışacak.\n  * Verilerin JSON'a ve JSON'ın python nesnesine dönüşümü otomatik olarak yapılacak.\n  * Her şeyi OpenAPI ile uyumlu bir şekilde otomatik olarak dokümanlayacak ve bunlarda aşağıdaki gibi kullanılabilecek:\n    * Etkileşimli dokümantasyon sistemleri.\n    * Bir çok programlama dili için otomatik istemci kodu üretim sistemleri.\n  * İki ayrı etkileşimli dokümantasyon arayüzünü doğrudan sağlayacak.\n* * *\nDaha yeni başladık ama çalışma mantığını çoktan anlamış oldunuz.\nŞimdi aşağıdaki satırı değiştirmeyi deneyin:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...bundan:\n            ... \"item_name\": item.name ...\n...buna:\n            ... \"item_price\": item.price ...\n...ve editörünün veri tiplerini bildiğini ve otomatik tamamladığını\ngöreceksiniz:\nDaha fazal özellik içeren, daha eksiksiz bir örnek için [Öğretici - Kullanıcı\nRehberi](https://fastapi.tiangolo.com/tr/tutorial/) sayfasını ziyaret\nedebilirsin.\n**Spoiler** : Öğretici - Kullanıcı rehberi şunları içerir:\n  * **Parameterlerin** , **headers** , **çerezler** , **form alanları** ve **dosyalar** olarak tanımlanması.\n  * `maximum_length` ya da `regex` gibi **doğrulama kısıtlamalarının** nasıl yapılabileceği.\n  * Çok güçlü ve kullanımı kolay **Bağımlılık Enjeksiyonu** sistemi oluşturmayı.\n  * Güvenlik ve kimlik doğrulama, **JWT tokenleri** ile **OAuth2** desteği, ve **HTTP Basic** doğrulaması.\n  * İleri seviye fakat bir o kadarda basit olan **çok derin JSON modelleri** (Pydantic sayesinde).\n  * **GraphQL** entegrasyonu: [Strawberry](https://strawberry.rocks) ve diğer kütüphaneleri kullanarak.\n  * Diğer ekstra özellikler (Starlette sayesinde):\n    * **WebSocketler**\n    * HTTPX ve `pytest` sayesinde aşırı kolay testler.\n    * **CORS**\n    * **Cookie Sessions**\n    * ...ve daha fazlası.\n## Performans¶\nBağımsız TechEmpower kıyaslamaları gösteriyor ki, Uvicorn ile çalıştırılan\n**FastAPI** uygulamaları [en hızlı Python framework'lerinden\nbirisi](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nsadece Starlette ve Uvicorn'dan yavaş, ki FastAPI bunların üzerine kurulu bir\nkütüphanedir.\nDaha fazla bilgi için, bu bölüme bir göz at\n[Kıyaslamalar](https://fastapi.tiangolo.com/tr/benchmarks/).\n## Opsiyonel Gereksinimler¶\nPydantic tarafında kullanılan:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- email doğrulaması için.\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \\- ayar yönetimi için.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \\- Pydantic ile birlikte kullanılabilecek ek tipler için.\nStarlette tarafında kullanılan:\n  * [`httpx`](https://www.python-httpx.org) \\- Eğer `TestClient` yapısını kullanacaksanız gereklidir.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Eğer varsayılan template konfigürasyonunu kullanacaksanız gereklidir.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Eğer `request.form()` ile form dönüşümü desteğini kullanacaksanız gereklidir.\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- `SessionMiddleware` desteği için gerekli.\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- `SchemaGenerator` desteği için gerekli (Muhtemelen FastAPI kullanırken ihtiyacınız olmaz).\nHem FastAPI hem de Starlette tarafından kullanılan:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- oluşturduğumuz uygulamayı servis edecek web sunucusu görevini üstlenir.\n  * [`orjson`](https://github.com/ijl/orjson) \\- `ORJSONResponse` kullanacaksanız gereklidir.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- `UJSONResponse` kullanacaksanız gerekli.\nBunların hepsini `pip install fastapi[all]` ile yükleyebilirsin.\n## Lisans¶\nBu proje, MIT lisansı şartları altında lisanslanmıştır.\nBaşa dön\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface – Интерфейс командной строки\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables\n  *[자동완성]: also known as auto-complete, autocompletion, IntelliSense\n  *[변환]: 다음으로 알려진: 직렬화, 파싱, 마샬링\n  *[의존성 주입]: 컴포넌트, 리소스, 제공자, 서비스, injectables라 알려진\n  *[_Auto-Complete_]: também conhecido como _auto-complete_, _autocompletion_, _IntelliSense_\n  *[_CLI_]: Command Line Interface\n  *[Conversão]: também conhecido como: serialization, parsing, marshalling\n  *[Injeção de Dependência]: também conhecido como componentes, recursos, fornecedores, serviços, injetáveis\n  *[Автозавершение]: также известное как: автодополнение, IntelliSense\n  *[Преобразование]: также известное как: сериализация, парсинг, маршалинг\n  *[внедрения зависимостей]: также известная как: компоненты, ресурсы, провайдеры, сервисы, инъекции\n  *[«парсинг»]: преобразование строки, полученной из HTTP-запроса, в данные Python\n  *[tip belirteçleri]: Tip Belirteçleri: Type Hints\n  *[otomatik tamamlama]: Otomatik Tamamlama: auto-complete, autocompletion, IntelliSense\n  *[komut satırı uygulaması]: Komut Satırı: Command Line Interface\n  *[_yollarına_]: Adres / Yol: Path \n  *[Gövde]: Gövde: Body\n  *[derin]: Derin / İç içe: Nested\n  *[dönüşümünü]: Dönüşüm: serialization, parsing, marshalling olarak da biliniyor\n  *[Bağımlılık Enjeksiyonu]: Bağımlılık Enjeksiyonu: components, resources, providers, services, injectables olarak da biliniyor.\n  *[dönüşümü]: HTTP isteği ile gelen string veriyi Python nesnesine çevirme.",
    "length": 22981,
    "links": [
      "https://fastapi.tiangolo.com/uk/",
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/tr/features/",
      "https://fastapi.tiangolo.com/tr/learn/",
      "https://fastapi.tiangolo.com/tr/reference/",
      "https://fastapi.tiangolo.com/tr/fastapi-people/",
      "https://fastapi.tiangolo.com/tr/resources/",
      "https://fastapi.tiangolo.com/tr/about/",
      "https://fastapi.tiangolo.com/tr/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/tr/fastapi-people/",
      "https://fastapi.tiangolo.com/tr/async/",
      "https://fastapi.tiangolo.com/tr/tutorial/",
      "https://fastapi.tiangolo.com/tr/benchmarks/",
      "https://fastapi.tiangolo.com/tr/features/"
    ],
    "depth": 2
  },
  {
    "url": "https://fastapi.tiangolo.com/uk/",
    "title": "FastAPI",
    "content": "# FastAPI\n[](https://fastapi.tiangolo.com)\n_Готовий до продакшину, високопродуктивний, простий у вивченні та швидкий для\nнаписання коду фреймворк_\n[\n](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster)\n[ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi)\n[ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)\n* * *\n**Документація** : <https://fastapi.tiangolo.com>\n**Програмний код** : <https://github.com/fastapi/fastapi>\n* * *\nFastAPI - це сучасний, швидкий (високопродуктивний), вебфреймворк для\nстворення API за допомогою Python,в основі якого лежить стандартна анотація\nтипів Python.\nКлючові особливості:\n  * **Швидкий** : Дуже висока продуктивність, на рівні з **NodeJS** та **Go** (завдяки Starlette та Pydantic). Один із найшвидших фреймворків.\n  * **Швидке написання коду** : Пришвидшує розробку функціоналу приблизно на 200%-300%. *\n  * **Менше помилок** : Зменшить кількість помилок спричинених людиною (розробником) на 40%. *\n  * **Інтуїтивний** : Чудова підтримка редакторами коду. Доповнення всюди. Зменште час на налагодження.\n  * **Простий** : Спроектований, для легкого використання та навчання. Знадобиться менше часу на читання документації.\n  * **Короткий** : Зведе до мінімуму дублювання коду. Кожен оголошений параметр може виконувати кілька функцій.\n  * **Надійний** : Ви матимете стабільний код готовий до продакшину з автоматичною інтерактивною документацією.\n  * **Стандартизований** : Оснований та повністю сумісний з відкритими стандартами для API: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (попередньо відомий як Swagger) та [JSON Schema](https://json-schema.org/).\n* оцінка на основі тестів внутрішньої команди розробників, створення продуктових застосунків.\n## Спонсори¶\n[](https://blockbee.io?ref=fastapi \"BlockBee Cryptocurrency Payment Gateway\") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge \"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge \"Auth, user management and more for your B2B product\") [](https://zuplo.link/fastapi-gh \"Zuplo: Deploy, Secure, Document, and Monetize your FastAPI\") [](https://liblab.com?utm_source=fastapi \"liblab - Generate SDKs from FastAPI\") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi \"Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.\") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi \"Cut Code Review Time & Bugs in Half with CodeRabbit\") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source \"The Gold Standard in Retail Account Linking\") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi \"Deploy enterprise applications at startup speed\") [](https://serpapi.com/?utm_source=fastapi_website \"SerpApi: Web Search API\") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display \"Pay as you go for market data\") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship \"SDKs for your API | Speakeasy\") [](https://www.svix.com/ \"Svix - Webhooks as a service\") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral \"Stainless | Generate best-in-class SDKs\") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi \"Fine-Grained Authorization for FastAPI\") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring \"InterviewPal - AI Interview Coach for Engineers and Devs\") [](https://dribia.com/en/ \"Dribia - Data Science within your reach\")\n[Other sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)\n## Враження¶\n\"_[...] I'm using**FastAPI** a ton these days. [...] I'm actually planning to\nuse it for all of my team's **ML services at Microsoft**. Some of them are\ngetting integrated into the core **Windows** product and some **Office**\nproducts._\"\nKabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)\n* * *\n\"_We adopted the**FastAPI** library to spawn a **REST** server that can be\nqueried to obtain **predictions**. [for Ludwig]_\"\nPiero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber**\n[(ref)](https://eng.uber.com/ludwig-v0-2/)\n* * *\n\"_**Netflix** is pleased to announce the open-source release of our **crisis\nmanagement** orchestration framework: **Dispatch**! [built with **FastAPI**]_\"\nKevin Glisson, Marc Vilanova, Forest Monsen - **Netflix**\n[(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)\n* * *\n\"_I’m over the moon excited about**FastAPI**. It’s so fun!_\"\nBrian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-\nto-right-the-py-wrongs?time_in_sec=855) podcast host**\n[(ref)](https://x.com/brianokken/status/1112220079972728832)\n* * *\n\"_Honestly, what you've built looks super solid and polished. In many ways,\nit's what I wanted**Hug** to be - it's really inspiring to see someone build\nthat._\"\nTimothy Crosley - **[Hug](https://github.com/hugapi/hug) creator**\n[(ref)](https://news.ycombinator.com/item?id=19455465)\n* * *\n\"_If you're looking to learn one**modern framework** for building REST APIs,\ncheck out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_\"\n\"_We've switched over to**FastAPI** for our **APIs** [...] I think you'll like\nit [...]_\"\nInes Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai)\nfounders - [spaCy](https://spacy.io) creators**\n[(ref)](https://x.com/_inesmontani/status/1144173225322143744) \\-\n[(ref)](https://x.com/honnibal/status/1144031421859655680)\n* * *\n## **Typer** , FastAPI CLI¶\n[](https://typer.tiangolo.com)\nСтворюючи CLI застосунок для використання в терміналі, замість веб-API\nзверніть увагу на [**Typer**](https://typer.tiangolo.com/).\n**Typer** є молодшим братом FastAPI. І це **FastAPI для CLI**. ⌨️ 🚀\n## Вимоги¶\nFastAPI стоїть на плечах гігантів:\n  * [Starlette](https://www.starlette.dev/) для web частини.\n  * [Pydantic](https://docs.pydantic.dev/) для частини даних.\n## Вставновлення¶\n    $ pip install fastapi\n    ---> 100%\nВам також знадобиться сервер ASGI для продакшину, наприклад\n[Uvicorn](https://www.uvicorn.dev) або\n[Hypercorn](https://github.com/pgjones/hypercorn).\n    $ pip install uvicorn[standard]\n    ---> 100%\n## Приклад¶\n### Створіть¶\n  * Створіть файл `main.py` з:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\nАбо використайте `async def`...\nЯкщо ваш код використовує `async` / `await`, скористайтеся `async def`:\n    from typing import Union\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n**Примітка** :\nСтикнувшись з проблемами, не зайвим буде ознайомитися з розділом _\"In a\nhurry?\"_ про [`async` та `await` у\nдокументації](https://fastapi.tiangolo.com/async/#in-a-hurry).\n### Запустіть¶\nЗапустіть server з:\n    $ uvicorn main:app --reload\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n    INFO:     Started reloader process [28720]\n    INFO:     Started server process [28722]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\nПро команди `uvicorn main:app --reload`...\nКоманда `uvicorn main:app` посилається на:\n  * `main`: файл `main.py` (\"Модуль\" Python).\n  * `app`: об’єкт створений усередині `main.py` рядком `app = FastAPI()`.\n  * `--reload`: перезапускає сервер після зміни коду. Використовуйте виключно для розробки.\n### Перевірте¶\nВідкрийте браузер та введіть адресу\n<http://127.0.0.1:8000/items/5?q=somequery>.\nВи побачите у відповідь подібний JSON:\n    {\"item_id\": 5, \"q\": \"somequery\"}\nВи вже створили API, який:\n  * Отримує HTTP запити за _шляхами_ `/` та `/items/{item_id}`.\n  * Обидва _шляхи_ приймають `GET` _операції_ (також відомі як HTTP _методи_).\n  * _Шлях_ `/items/{item_id}` містить _параметр шляху_ `item_id` який має бути типу `int`.\n  * _Шлях_ `/items/{item_id}` містить необовʼязковий `str` _параметр запиту_ `q`.\n### Інтерактивні документації API¶\nПерейдемо сюди <http://127.0.0.1:8000/docs>.\nВи побачите автоматичну інтерактивну API документацію (створену завдяки\n[Swagger UI](https://github.com/swagger-api/swagger-ui)):\n### Альтернативні документації API¶\nТепер перейдемо сюди <http://127.0.0.1:8000/redoc>.\nВи побачите альтернативну автоматичну документацію (створену завдяки\n[ReDoc](https://github.com/Rebilly/ReDoc)):\n## Приклад оновлення¶\nТепер модифікуйте файл `main.py`, щоб отримати вміст запиту `PUT`.\nОголошуйте вміст запиту за допомогою стандартних типів Python завдяки\nPydantic.\n    from typing import Union\n    from fastapi import FastAPI\n    from pydantic import BaseModel\n    app = FastAPI()\n    class Item(BaseModel):\n        name: str\n        price: float\n        is_offer: Union[bool, None] = None\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n    @app.get(\"/items/{item_id}\")\n    def read_item(item_id: int, q: Union[str, None] = None):\n        return {\"item_id\": item_id, \"q\": q}\n    @app.put(\"/items/{item_id}\")\n    def update_item(item_id: int, item: Item):\n        return {\"item_name\": item.name, \"item_id\": item_id}\nСервер повинен автоматично перезавантажуватися (тому що Ви додали `--reload`\nдо `uvicorn` команди вище).\n### Оновлення інтерактивної API документації¶\nТепер перейдемо сюди <http://127.0.0.1:8000/docs>.\n  * Інтерактивна документація API буде автоматично оновлена, включаючи новий вміст:\n  * Натисніть кнопку \"Try it out\", це дозволить вам заповнити параметри та безпосередньо взаємодіяти з API:\n  * Потім натисніть кнопку \"Execute\", інтерфейс користувача зв'яжеться з вашим API, надішле параметри, у відповідь отримає результати та покаже їх на екрані:\n### Оновлення альтернативної API документації¶\nЗараз перейдемо <http://127.0.0.1:8000/redoc>.\n  * Альтернативна документація також показуватиме новий параметр і вміст запиту:\n### Підсумки¶\nТаким чином, Ви **один раз** оголошуєте типи параметрів, тіла тощо, як\nпараметри функції.\nВи робите це за допомогою стандартних сучасних типів Python.\nВам не потрібно вивчати новий синтаксис, методи чи класи конкретної бібліотеки\nтощо.\nВикористовуючи стандартний **Python**.\nНаприклад, для `int`:\n    item_id: int\nабо для більш складної моделі `Item`:\n    item: Item\n...і з цим єдиним оголошенням Ви отримуєте:\n  * Підтримку редактора, включаючи:\n    * Варіанти заповнення.\n    * Перевірку типів.\n  * Перевірку даних:\n    * Автоматичні та зрозумілі помилки, у разі некоректних даних.\n    * Перевірка навіть для JSON з високим рівнем вкладеності.\n  * Перетворення вхідних даних: з мережі до даних і типів Python. Читання з:\n    * JSON.\n    * Параметрів шляху.\n    * Параметрів запиту.\n    * Cookies.\n    * Headers.\n    * Forms.\n    * Файлів.\n  * Перетворення вихідних даних: з типів і даних Python до мережевих даних (як JSON):\n    * Конвертація Python типів (`str`, `int`, `float`, `bool`, `list`, тощо).\n    * `datetime` об'єкти.\n    * `UUID` об'єкти.\n    * Моделі бази даних.\n    * ...та багато іншого.\n  * Автоматичну інтерактивну документацію API, включаючи 2 альтернативні інтерфейси користувача:\n    * Swagger UI.\n    * ReDoc.\n* * *\nПовертаючись до попереднього прикладу коду, **FastAPI** :\n  * Підтвердить наявність `item_id` у шляху для запитів `GET` та `PUT`.\n  * Підтвердить, що `item_id` має тип `int` для запитів `GET` and `PUT`.\n    * Якщо це не так, клієнт побачить корисну, зрозумілу помилку.\n  * Перевірить, чи є необов'язковий параметр запиту з назвою `q` (а саме `http://127.0.0.1:8000/items/foo?q=somequery`) для запитів `GET`.\n    * Оскільки параметр `q` оголошено як `= None`, він необов'язковий.\n    * За відсутності `None` він був би обов'язковим (як і вміст у випадку з `PUT`).\n  * Для запитів `PUT` із `/items/{item_id}`, читає вміст як JSON:\n    * Перевірить, чи має обов'язковий атрибут `name` тип `str`.\n    * Перевірить, чи має обов'язковий атрибут `price` тип `float`.\n    * Перевірить, чи існує необов'язковий атрибут `is_offer` та чи має він тип `bool`.\n    * Усе це також працюватиме для глибоко вкладених об'єктів JSON.\n  * Автоматично конвертує із та в JSON.\n  * Документує все за допомогою OpenAPI, який може бути використано в:\n    * Інтерактивних системах документації.\n    * Системах автоматичної генерації клієнтського коду для багатьох мов.\n  * Надає безпосередньо 2 вебінтерфейси інтерактивної документації.\n* * *\nМи лише трішки доторкнулися до коду, але Ви вже маєте уявлення про те, як все\nпрацює.\nСпробуйте змінити рядок:\n        return {\"item_name\": item.name, \"item_id\": item_id}\n...із:\n            ... \"item_name\": item.name ...\n...на:\n            ... \"item_price\": item.price ...\n...і побачите, як ваш редактор автоматично заповнюватиме атрибути та знатиме\nїхні типи:\nДля більш повного ознайомлення з додатковими функціями, перегляньте [Туторіал\n- Посібник Користувача](https://fastapi.tiangolo.com/tutorial/).\n**Spoiler alert** : туторіал - посібник користувача містить:\n  * Оголошення **параметрів** з інших місць як: **headers** , **cookies** , **form fields** та **files**.\n  * Як встановити **перевірку обмежень** як `maximum_length` або `regex`.\n  * Дуже потужна і проста у використанні система **Ін'єкція Залежностей**.\n  * Безпека та автентифікація, включаючи підтримку **OAuth2** з **JWT tokens** та **HTTP Basic** автентифікацію.\n  * Досконаліші (але однаково прості) техніки для оголошення **глибоко вкладених моделей JSON** (завдяки Pydantic).\n  * Багато додаткових функцій (завдяки Starlette) як-от:\n    * **WebSockets**\n    * надзвичайно прості тести на основі HTTPX та `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ...та більше.\n## Продуктивність¶\nНезалежні тести TechEmpower показують що застосунки **FastAPI** , які працюють\nпід керуванням Uvicorn [є одними з найшвидших серед доступних фреймворків в\nPython](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7),\nпоступаючись лише Starlette та Uvicorn (які внутрішньо використовуються в\nFastAPI). (*)\nЩоб дізнатися більше про це, перегляньте розділ\n[Benchmarks](https://fastapi.tiangolo.com/benchmarks/).\n## Необов'язкові залежності¶\nPydantic використовує:\n  * [`email-validator`](https://github.com/JoshData/python-email-validator) \\- для валідації електронної пошти.\n  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \\- для управління налаштуваннями.\n  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \\- для додаткових типів, що можуть бути використані з Pydantic.\nStarlette використовує:\n  * [`httpx`](https://www.python-httpx.org) \\- Необхідно, якщо Ви хочете використовувати `TestClient`.\n  * [`jinja2`](https://jinja.palletsprojects.com) \\- Необхідно, якщо Ви хочете використовувати шаблони як конфігурацію за замовчуванням.\n  * [`python-multipart`](https://github.com/Kludex/python-multipart) \\- Необхідно, якщо Ви хочете підтримувати \"розбір\" форми за допомогою `request.form()`.\n  * [`itsdangerous`](https://pythonhosted.org/itsdangerous/) \\- Необхідно для підтримки `SessionMiddleware`.\n  * [`pyyaml`](https://pyyaml.org/wiki/PyYAMLDocumentation) \\- Необхідно для підтримки Starlette `SchemaGenerator` (ймовірно, вам це не потрібно з FastAPI).\nFastAPI / Starlette використовують:\n  * [`uvicorn`](https://www.uvicorn.dev) \\- для сервера, який завантажує та обслуговує вашу програму.\n  * [`orjson`](https://github.com/ijl/orjson) \\- Необхідно, якщо Ви хочете використовувати `ORJSONResponse`.\n  * [`ujson`](https://github.com/esnme/ultrajson) \\- Необхідно, якщо Ви хочете використовувати `UJSONResponse`.\nВи можете встановити все це за допомогою `pip install fastapi[all]`.\n## Ліцензія¶\nЦей проєкт ліцензовано згідно з умовами ліцензії MIT.\nПовернутись нагору\n  *[Completion]: also known as auto-complete, autocompletion, IntelliSense\n  *[CLI]: Command Line Interface\n  *[Conversion]: also known as: serialization, parsing, marshalling\n  *[Dependency Injection]: also known as components, resources, providers, services, injectables\n  *[\"parsing\"]: converting the string that comes from an HTTP request into Python data\n  *[Code-Vervollständigung]: auch bekannt als Auto-Complete, Autovervollständigung, IntelliSense\n  *[Response]: Response – Antwort: Daten, die der Server zum anfragenden Client zurücksendet\n  *[Requests]: Request – Anfrage: Daten, die der Client zum Server sendet\n  *[Body]: Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten\n  *[Konvertierung]: auch bekannt als: Serialisierung, Parsen, Marshalling\n  *[„parsen“]: Konvertieren des Strings, der aus einem HTTP-Request stammt, nach Python-Daten\n  *[Autocompletado]: también conocido como autocompletado, IntelliSense\n  *[Conversión]: también conocido como: serialización, parsing, marshalling\n  *[Inyección de Dependencias]: también conocido como componentes, recursos, proveedores, servicios, inyectables\n  *[سرعت]: Fast\n  *[کدنویسی سریع]: Fast to code\n  *[باگ کمتر]: Fewer bugs\n  *[هوشمندانه]: Intuitive\n  *[تکمیل]: یا اتوکامپلیت، اتوکامپلشن، اینتلیسنس\n  *[آسان]: Easy\n  *[کوچک]: Short\n  *[استوار]: Robust\n  *[مستندات تعاملی]: Interactive documentation\n  *[مبتنی بر استانداردها]: Standards-based\n  *[واسط خط فرمان]: CLI (Command Line Interface)\n  *[عملیات]: operations در OpenAPI\n  *[_پارامتر مسیر_]: Path Parameter\n  *[_پارامتر پرسمان_]: Query Parameter\n  *[بدنه]: Body\n  *[انواع]: Type\n  *[نحو]: Syntax\n  *[تبدیل]: serialization, parsing, marshalling\n  *[پارامترهای مسیر]: Path parameters\n  *[پارامترهای پرسمان]: Query parameters\n  *[کوکی‌ها]: Cookies\n  *[سرآیند‌ها (هدرها)]: Headers\n  *[فرم‌ها]: Forms\n  *[فایل‌ها]: Files\n  *[محدودیت‌های اعتبارسنجی]: Validation Constraints\n  *[وب‌سوکت]: WebSocket\n  *[\"تجزیه (parse)\"]: تبدیل رشته متنی موجود در درخواست HTTP به انواع داده پایتون\n  *[Complétion]: également connu sous le nom d'auto-complétion, autocomplétion, IntelliSense\n  *[ CLI]: Command Line Interface\n  *[JSON]: JavaScript Object Notation\n  *[paramètre]: en anglais : path parameter\n  *[paramètre de requête]: en anglais : query param\n  *[le corps]: en anglais : body\n  *[Une conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[les paramètres du chemin]: en anglais : path parameters\n  *[les paramètres de la requête]: en anglais : query parameters\n  *[les en-têtes]: en anglais : headers\n  *[les formulaires]: en anglais : forms\n  *[les fichiers]: en anglais : files\n  *[La conversion]: aussi connu sous le nom de : serialization, parsing, marshalling\n  *[en-têtes]: en anglais : headers\n  *[système d'injection de dépendance]: aussi connu sous le nom de composants, ressources, fournisseurs, services, injectables\n  *[ JWT]: JSON Web Tokens\n  *[ JSON]: JavaScript Object Notation\n  *[CORS]: Cross-Origin Resource Sharing\n  *[\"décodage\"]: convertit la chaine de caractère d'une requête HTTP en donnée Python\n  *[オートコンプリート。]: also known as auto-complete, autocompletion, IntelliSense\n  *[変換]: also known as: serialization, parsing, marshalling\n  *[**依存性注入**]: also known as components, resources, providers, services, injectables\n  *[자동완성]: also known as auto-complete, autocompletion, IntelliSense\n  *[변환]: 다음으로 알려진: 직렬화, 파싱, 마샬링\n  *[의존성 주입]: 컴포넌트, 리소스, 제공자, 서비스, injectables라 알려진\n  *[_Auto-Complete_]: também conhecido como _auto-complete_, _autocompletion_, _IntelliSense_\n  *[_CLI_]: Command Line Interface\n  *[Conversão]: também conhecido como: serialization, parsing, marshalling\n  *[Injeção de Dependência]: também conhecido como componentes, recursos, fornecedores, serviços, injetáveis\n  *[Автозавершение]: также известное как: автодополнение, IntelliSense\n  *[Преобразование]: также известное как: сериализация, парсинг, маршалинг\n  *[внедрения зависимостей]: также известная как: компоненты, ресурсы, провайдеры, сервисы, инъекции\n  *[«парсинг»]: преобразование строки, полученной из HTTP-запроса, в данные Python\n  *[tip belirteçleri]: Tip Belirteçleri: Type Hints\n  *[otomatik tamamlama]: Otomatik Tamamlama: auto-complete, autocompletion, IntelliSense\n  *[komut satırı uygulaması]: Komut Satırı: Command Line Interface\n  *[_yollarına_]: Adres / Yol: Path \n  *[Gövde]: Gövde: Body\n  *[derin]: Derin / İç içe: Nested\n  *[dönüşümünü]: Dönüşüm: serialization, parsing, marshalling olarak da biliniyor\n  *[Bağımlılık Enjeksiyonu]: Bağımlılık Enjeksiyonu: components, resources, providers, services, injectables olarak da biliniyor.\n  *[dönüşümü]: HTTP isteği ile gelen string veriyi Python nesnesine çevirme.\n  *[Доповнення]: Також відоме як auto-complete, autocompletion, IntelliSense.\n  *[Перетворення]: також відомий як: serialization, parsing, marshalling\n  *[Ін'єкція Залежностей]: також відома як: components, resources, providers, services, injectables\n  *[\"розбір\"]: перетворення рядка, який надходить із запиту HTTP, на дані Python",
    "length": 21414,
    "links": [
      "https://fastapi.tiangolo.com/vi/",
      "https://fastapi.tiangolo.com/zh/",
      "https://fastapi.tiangolo.com/zh-hant/",
      "https://fastapi.tiangolo.com/em/",
      "https://fastapi.tiangolo.com/uk/features/",
      "https://fastapi.tiangolo.com/uk/learn/",
      "https://fastapi.tiangolo.com/uk/reference/",
      "https://fastapi.tiangolo.com/uk/fastapi-people/",
      "https://fastapi.tiangolo.com/uk/resources/",
      "https://fastapi.tiangolo.com/uk/about/",
      "https://fastapi.tiangolo.com/uk/release-notes/",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com",
      "https://fastapi.tiangolo.com/fastapi-people/",
      "https://fastapi.tiangolo.com/async/",
      "https://fastapi.tiangolo.com/tutorial/",
      "https://fastapi.tiangolo.com/benchmarks/",
      "https://fastapi.tiangolo.com/uk/features/"
    ],
    "depth": 2
  }
]